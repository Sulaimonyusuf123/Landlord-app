diff --git a/app/(tabs)/_layout.tsx b/app/(tabs)/_layout.tsx
index 3c8ed14..fa207d4 100644
--- a/app/(tabs)/_layout.tsx
+++ b/app/(tabs)/_layout.tsx
@@ -1,24 +1,17 @@
-import { Stack } from 'expo-router';
+import { Tabs } from 'expo-router';
 import React from 'react';
 
 export default function TabLayout() {
   return (
-    <Stack screenOptions={{ headerShown: false }}>
-      <Stack.Screen name="dashboard" />
-      <Stack.Screen name="properties" />
-      <Stack.Screen name="payments" />
-      <Stack.Screen name="expenses" />
-      <Stack.Screen name="tenants" />
-      <Stack.Screen name="paymentReport" />
-      <Stack.Screen name="profile" />
-      <Stack.Screen name="addProperty" />
-      <Stack.Screen name="addTenant" />
-      <Stack.Screen name="addPayment" />
-      <Stack.Screen name="addExpense" />
-      <Stack.Screen name="units" />
-      <Stack.Screen name="unit-details" />
-      <Stack.Screen name="notification" />
-      <Stack.Screen name="navbar" />
-    </Stack>
+    <Tabs screenOptions={{ headerShown: false }}>
+      <Tabs.Screen name="dashboard" />
+      <Tabs.Screen name="properties" />
+      <Tabs.Screen name="units" />
+      <Tabs.Screen name="tenants" />
+      <Tabs.Screen name="payments" />
+      <Tabs.Screen name="expenses" />
+      <Tabs.Screen name="notification" />
+      <Tabs.Screen name="profile" />
+    </Tabs>
   );
-}
+}
\ No newline at end of file
diff --git a/app/(tabs)/addExpense.tsx b/app/(tabs)/addExpense.tsx
deleted file mode 100644
index e03c5e5..0000000
--- a/app/(tabs)/addExpense.tsx
+++ /dev/null
@@ -1,291 +0,0 @@
-// app/(tabs)/addExpense.tsx
-
-import React, { useState, useEffect } from "react";
-import { View, Text, ScrollView, StyleSheet, TouchableOpacity, TextInput, Alert, ActivityIndicator } from "react-native";
-import { Ionicons } from "@expo/vector-icons";
-import { useRouter } from "expo-router";
-import { getAllProperties, saveExpenseToMock } from "../../lib/mockData";
-import type { Property, Unit } from "../../lib/mockData";
-
-const EXPENSE_TYPES = [
-  "Electricity Bill",
-  "Water Bill",
-  "Internet Bill",
-  "Guard Salary",
-  "Elevator Maintenance",
-  "Renovation Costs",
-  "Other",
-];
-
-const AddExpense = () => {
-  const router = useRouter();
-  const [properties, setProperties] = useState<Property[]>([]);
-  const [selectedPropertyId, setSelectedPropertyId] = useState<string | null>(null);
-  const [units, setUnits] = useState<Unit[]>([]);
-  const [selectedUnitId, setSelectedUnitId] = useState<string | null>(null);
-  const [expenseType, setExpenseType] = useState<string | null>(null);
-  const [amount, setAmount] = useState<string>('');
-  const [expenseDate, setExpenseDate] = useState<string>(new Date().toISOString().split('T')[0]);
-  const [notes, setNotes] = useState<string>('');
-  const [showExpenseOptions, setShowExpenseOptions] = useState(false);
-  const [showPropertyOptions, setShowPropertyOptions] = useState(false);
-  const [loading, setLoading] = useState(true);
-
-  useEffect(() => {
-    const fetchProperties = async () => {
-      try {
-        const data = await getAllProperties();
-        setProperties(data);
-      } catch (error) {
-        console.error("Failed to load properties:", error);
-      } finally {
-        setLoading(false);
-      }
-    };
-    fetchProperties();
-  }, []);
-
-  const handleSaveExpense = async () => {
-    if (!expenseType) {
-      Alert.alert("Error", "Please select an expense type.");
-      return;
-    }
-    if (!selectedPropertyId) {
-      Alert.alert("Error", "Please select a property.");
-      return;
-    }
-    if (!amount || isNaN(Number(amount))) {
-      Alert.alert("Error", "Please enter a valid amount.");
-      return;
-    }
-    if (!expenseDate.match(/^\d{4}-\d{2}-\d{2}$/)) {
-      Alert.alert("Error", "Please enter a valid date in format YYYY-MM-DD.");
-      return;
-    }
-
-    try {
-      await saveExpenseToMock({
-        id: Date.now().toString(),
-        propertyId: selectedPropertyId,
-        unitId: selectedUnitId || undefined,
-        amount: Number(amount),
-        expenseType: expenseType,
-        expenseDate: expenseDate,
-        notes: notes,
-      });
-
-      Alert.alert("Success", "Expense saved successfully!");
-      router.back();
-    } catch (error) {
-      console.error("Failed to save expense:", error);
-      Alert.alert("Error", "Failed to save expense. Please try again.");
-    }
-  };
-
-  const handleDateInput = (text: string) => {
-    const cleaned = text.replace(/[^0-9-]/g, '');
-    setExpenseDate(cleaned);
-  };
-
-  if (loading) {
-    return (
-      <View style={styles.loadingContainer}>
-        <ActivityIndicator size="large" color="#17b8a6" />
-      </View>
-    );
-  }
-
-  return (
-    <ScrollView style={styles.container}>
-      <View style={styles.header}>
-        <TouchableOpacity onPress={() => router.back()}>
-          <Ionicons name="arrow-back" size={28} color="white" />
-        </TouchableOpacity>
-        <Text style={styles.headerTitle}>Add Expense</Text>
-        <View style={{ width: 30 }} />
-      </View>
-
-      <View style={styles.formContainer}>
-        <Text style={styles.label}>Expense Type</Text>
-        <TouchableOpacity onPress={() => setShowExpenseOptions(!showExpenseOptions)} style={styles.dropdown}>
-          <Text style={{ color: expenseType ? "#000" : "#aaa" }}>
-            {expenseType || "Select Expense Type"}
-          </Text>
-        </TouchableOpacity>
-        {showExpenseOptions && (
-          <View style={styles.dropdownOptions}>
-            {EXPENSE_TYPES.map((type) => (
-              <TouchableOpacity
-                key={type}
-                onPress={() => {
-                  setExpenseType(type);
-                  setShowExpenseOptions(false);
-                }}
-                style={styles.dropdownItem}
-              >
-                <Text>{type}</Text>
-              </TouchableOpacity>
-            ))}
-          </View>
-        )}
-
-        <Text style={styles.label}>Property</Text>
-        <TouchableOpacity onPress={() => setShowPropertyOptions(!showPropertyOptions)} style={styles.dropdown}>
-          <Text style={{ color: selectedPropertyId ? "#000" : "#aaa" }}>
-            {properties.find(p => p.id === selectedPropertyId)?.name || "Select Property"}
-          </Text>
-        </TouchableOpacity>
-        {showPropertyOptions && (
-          <View style={styles.dropdownOptions}>
-            {properties.map((property) => (
-              <TouchableOpacity
-                key={property.id}
-                onPress={() => {
-                  setSelectedPropertyId(property.id);
-                  if (property.type === "building" && property.units) {
-                    setUnits(property.units);
-                  } else {
-                    setUnits([]);
-                  }
-                  setShowPropertyOptions(false);
-                }}
-                style={styles.dropdownItem}
-              >
-                <Text>{property.name}</Text>
-              </TouchableOpacity>
-            ))}
-          </View>
-        )}
-
-        {units.length > 0 && (
-          <>
-            <Text style={styles.label}>Unit (Optional)</Text>
-            <View style={styles.dropdown}>
-              {units.map((unit) => (
-                <TouchableOpacity
-                  key={unit.id}
-                  onPress={() => setSelectedUnitId(unit.id)}
-                  style={[
-                    styles.dropdownItem,
-                    selectedUnitId === unit.id && { backgroundColor: "#dff8eb" },
-                  ]}
-                >
-                    <Text>Unit {unit.id}</Text>
-                </TouchableOpacity>
-              ))}
-            </View>
-          </>
-        )}
-
-        <Text style={styles.label}>Amount (SAR)</Text>
-        <TextInput
-          style={styles.input}
-          keyboardType="numeric"
-          value={amount}
-          onChangeText={setAmount}
-          placeholder="Enter amount"
-        />
-
-        <Text style={styles.label}>Expense Date (Format: YYYY-MM-DD)</Text>
-        <TextInput
-          style={styles.input}
-          placeholder="Format: YYYY-MM-DD"
-          value={expenseDate}
-          onChangeText={handleDateInput}
-        />
-
-        <Text style={styles.label}>Notes (Optional)</Text>
-        <TextInput
-          style={[styles.input, { height: 80 }]}
-          multiline
-          value={notes}
-          onChangeText={setNotes}
-          placeholder="Write any notes..."
-        />
-
-        <TouchableOpacity style={styles.saveButton} onPress={handleSaveExpense}>
-          <Text style={styles.saveButtonText}>Save Expense</Text>
-        </TouchableOpacity>
-      </View>
-    </ScrollView>
-  );
-};
-
-export default AddExpense;
-
-const styles = StyleSheet.create({
-  container: {
-    flex: 1,
-    backgroundColor: "#F5F7FA",
-  },
-  loadingContainer: {
-    flex: 1,
-    justifyContent: "center",
-    alignItems: "center",
-  },
-  header: {
-    flexDirection: "row",
-    justifyContent: "space-between",
-    alignItems: "center",
-    backgroundColor: "#17b8a6",
-    padding: 15,
-    marginBottom: 10,
-  },
-  headerTitle: {
-    fontSize: 18,
-    color: "white",
-    fontWeight: "bold",
-  },
-  formContainer: {
-    padding: 20,
-  },
-  label: {
-    fontSize: 14,
-    fontWeight: "bold",
-    color: "#333",
-    marginBottom: 5,
-  },
-  input: {
-    backgroundColor: "#fff",
-    borderWidth: 1,
-    borderColor: "#dcdcdc",
-    borderRadius: 8,
-    paddingHorizontal: 10,
-    paddingVertical: 8,
-    marginBottom: 15,
-    fontSize: 14,
-  },
-  dropdown: {
-    backgroundColor: "#fff",
-    borderWidth: 1,
-    borderColor: "#dcdcdc",
-    borderRadius: 8,
-    padding: 15,
-    marginBottom: 15,
-  },
-  dropdownOptions: {
-    backgroundColor: "#fff",
-    borderWidth: 1,
-    borderColor: "#ccc",
-    borderRadius: 8,
-    marginBottom: 15,
-    overflow: "hidden",
-  },
-  dropdownItem: {
-    padding: 15,
-    borderBottomWidth: 1,
-    borderBottomColor: "#eee",
-  },
-  saveButton: {
-    backgroundColor: "#17b8a6",
-    paddingVertical: 14,
-    borderRadius: 8,
-    marginTop: 10,
-    alignItems: "center",
-  },
-  saveButtonText: {
-    color: "white",
-    fontWeight: "bold",
-    fontSize: 16,
-  },
-});
diff --git a/app/(tabs)/addPayment.tsx b/app/(tabs)/addPayment.tsx
deleted file mode 100644
index 62be2e4..0000000
--- a/app/(tabs)/addPayment.tsx
+++ /dev/null
@@ -1,297 +0,0 @@
-// app/(tabs)/addPayment.tsx
-
-import React, { useState, useEffect } from "react";
-import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Alert, TextInput, ActivityIndicator } from "react-native";
-import { Ionicons } from "@expo/vector-icons";
-import { useRouter } from "expo-router";
-import { getAllProperties, savePaymentToMock } from "../../lib/mockData"; 
-import type { Property, Unit } from "../../lib/mockData";
-
-const AddPayment = () => {
-  const router = useRouter();
-  const [properties, setProperties] = useState<Property[]>([]);
-  const [selectedPropertyId, setSelectedPropertyId] = useState<string | null>(null);
-  const [units, setUnits] = useState<Unit[]>([]);
-  const [selectedUnitId, setSelectedUnitId] = useState<string | null>(null);
-  const [monthlyRent, setMonthlyRent] = useState<number>(0);
-  const [totalDue, setTotalDue] = useState<number>(0);
-  const [amountPaid, setAmountPaid] = useState<string>('');
-  const [paymentDate, setPaymentDate] = useState<string>(new Date().toISOString().split('T')[0]);
-  const [notes, setNotes] = useState<string>('');
-  const [loading, setLoading] = useState(true);
-
-  useEffect(() => {
-    const fetchProperties = async () => {
-      try {
-        const data = await getAllProperties();
-        setProperties(data);
-      } catch (error) {
-        console.error("Failed to load properties:", error);
-      } finally {
-        setLoading(false);
-      }
-    };
-    fetchProperties();
-  }, []);
-
-  const handleSelectProperty = (propertyId: string) => {
-    setSelectedPropertyId(propertyId);
-    const property = properties.find(p => p.id === propertyId);
-    if (property?.type === "building" && property.units) {
-      setUnits(property.units);
-    } else {
-      setUnits([]);
-      setSelectedUnitId(null);
-    }
-  };
-
-  const handleSelectUnit = (unitId: string) => {
-    setSelectedUnitId(unitId);
-    const unit = units.find(u => u.id === unitId);
-    if (unit) {
-      setMonthlyRent(unit.rentAmount);
-      calculateTotalDue(unit);
-    }
-  };
-
-  const calculateTotalDue = (unit: Unit) => {
-    const today = new Date();
-    if (!unit.startDate) {
-      setTotalDue(0);
-      return;
-    }
-    const startDate = new Date(unit.startDate);
-    const monthsPassed = (today.getFullYear() - startDate.getFullYear()) * 12 + (today.getMonth() - startDate.getMonth());
-    const expectedTotal = monthsPassed * unit.rentAmount;
-    const paymentsMade = unit.payments?.reduce((sum, p) => sum + p.amount, 0) || 0;
-    const due = expectedTotal - paymentsMade;
-    setTotalDue(due > 0 ? due : 0);
-  };
-
-  const handleSavePayment = async () => {
-    if (!selectedPropertyId) {
-      Alert.alert("Error", "Please select a property.");
-      return;
-    }
-    if (units.length > 0 && !selectedUnitId) {
-      Alert.alert("Error", "Please select a unit.");
-      return;
-    }
-    if (!amountPaid || isNaN(Number(amountPaid))) {
-      Alert.alert("Error", "Please enter a valid amount paid.");
-      return;
-    }
-    if (!paymentDate.match(/^\d{4}-\d{2}-\d{2}$/)) {
-      Alert.alert("Error", "Please enter a valid date in format YYYY-MM-DD.");
-      return;
-    }
-
-    try {
-      await savePaymentToMock({
-        id: Date.now().toString(),
-        propertyId: selectedPropertyId,
-        unitId: selectedUnitId || undefined,
-        amount: Number(amountPaid),
-        paymentDate: paymentDate,
-        notes: notes,
-      });
-
-      Alert.alert("Success", "Payment saved successfully!");
-      router.back();
-    } catch (error) {
-      console.error("Failed to save payment:", error);
-      Alert.alert("Error", "Failed to save payment. Please try again.");
-    }
-  };
-
-  const handleDateInput = (text: string) => {
-    const cleaned = text.replace(/[^0-9-]/g, '');
-    setPaymentDate(cleaned);
-  };
-
-  if (loading) {
-    return (
-      <View style={styles.loadingContainer}>
-        <ActivityIndicator size="large" color="#17b8a6" />
-      </View>
-    );
-  }
-
-  return (
-    <View style={styles.container}>
-      {/* Header with Back Button */}
-      <View style={styles.header}>
-        <TouchableOpacity onPress={() => router.back()} style={styles.backButton}>
-          <Ionicons name="arrow-back" size={24} color="white" />
-        </TouchableOpacity>
-        <Text style={styles.headerTitle}>Add Payment</Text>
-        <View style={{ width: 30 }} />
-      </View>
-
-      {/* Form */}
-      <ScrollView contentContainerStyle={styles.formContainer}>
-        <Text style={styles.label}>Property</Text>
-        <View style={styles.dropdown}>
-          {properties.map((property) => (
-            <TouchableOpacity
-              key={property.id}
-              style={[
-                styles.dropdownItem,
-                selectedPropertyId === property.id && styles.selectedDropdownItem,
-              ]}
-              onPress={() => handleSelectProperty(property.id)}
-            >
-              <Text>{property.name}</Text>
-            </TouchableOpacity>
-          ))}
-        </View>
-
-        {units.length > 0 && (
-          <>
-            <Text style={styles.label}>Unit</Text>
-            <View style={styles.dropdown}>
-              {units.map((unit) => (
-                <TouchableOpacity
-                  key={unit.id}
-                  style={[
-                    styles.dropdownItem,
-                    selectedUnitId === unit.id && styles.selectedDropdownItem,
-                  ]}
-                  onPress={() => handleSelectUnit(unit.id)}
-                >
-                  <Text>Unit {unit.id}</Text>
-                </TouchableOpacity>
-              ))}
-            </View>
-          </>
-        )}
-
-        <Text style={styles.label}>Monthly Rent (SAR)</Text>
-        <View style={styles.readonlyField}>
-          <Text>{monthlyRent ? monthlyRent.toLocaleString() : "-"}</Text>
-        </View>
-
-        <Text style={styles.label}>Total Due (SAR)</Text>
-        <View style={styles.readonlyField}>
-          <Text>{totalDue ? totalDue.toLocaleString() : "-"}</Text>
-        </View>
-
-        <Text style={styles.label}>Amount Paid (SAR)</Text>
-        <TextInput
-          style={styles.input}
-          keyboardType="numeric"
-          value={amountPaid}
-          onChangeText={setAmountPaid}
-          placeholder="Enter amount paid"
-        />
-
-        <Text style={styles.label}>Payment Date (Format: YYYY-MM-DD)</Text>
-        <TextInput
-          style={styles.input}
-          placeholder="Format: YYYY-MM-DD"
-          value={paymentDate}
-          onChangeText={handleDateInput}
-        />
-
-        <Text style={styles.label}>Notes (optional)</Text>
-        <TextInput
-          style={[styles.input, { height: 80 }]}
-          multiline
-          value={notes}
-          onChangeText={setNotes}
-          placeholder="Write any notes..."
-        />
-
-        <TouchableOpacity style={styles.saveButton} onPress={handleSavePayment}>
-          <Text style={styles.saveButtonText}>Save Payment</Text>
-        </TouchableOpacity>
-      </ScrollView>
-    </View>
-  );
-};
-
-export default AddPayment;
-
-const styles = StyleSheet.create({
-  container: {
-    flex: 1,
-    backgroundColor: "#F5F7FA",
-  },
-  loadingContainer: {
-    flex: 1,
-    justifyContent: "center",
-    alignItems: "center",
-    backgroundColor: "#fff",
-  },
-  header: {
-    flexDirection: "row",
-    alignItems: "center",
-    backgroundColor: "#17b8a6",
-    padding: 15,
-    elevation: 4,
-  },
-  backButton: {
-    paddingRight: 10,
-  },
-  headerTitle: {
-    flex: 1,
-    fontSize: 18,
-    color: "white",
-    fontWeight: "bold",
-    textAlign: "center",
-    marginRight: 30,
-  },
-  formContainer: {
-    padding: 20,
-    paddingBottom: 50,
-  },
-  label: {
-    fontSize: 14,
-    fontWeight: "bold",
-    color: "#333",
-    marginBottom: 5,
-  },
-  input: {
-    backgroundColor: "#fff",
-    borderWidth: 1,
-    borderColor: "#dcdcdc",
-    borderRadius: 8,
-    paddingHorizontal: 10,
-    paddingVertical: 8,
-    marginBottom: 15,
-    fontSize: 14,
-  },
-  readonlyField: {
-    backgroundColor: "#e6f7f4",
-    padding: 12,
-    borderRadius: 8,
-    marginBottom: 15,
-  },
-  dropdown: {
-    backgroundColor: "#fff",
-    borderWidth: 1,
-    borderColor: "#dcdcdc",
-    borderRadius: 8,
-    marginBottom: 15,
-  },
-  dropdownItem: {
-    padding: 12,
-    borderBottomWidth: 1,
-    borderBottomColor: "#eee",
-  },
-  selectedDropdownItem: {
-    backgroundColor: "#dff8eb",
-  },
-  saveButton: {
-    backgroundColor: "#17b8a6",
-    paddingVertical: 14,
-    borderRadius: 8,
-    marginTop: 10,
-    alignItems: "center",
-  },
-  saveButtonText: {
-    color: "white",
-    fontWeight: "bold",
-    fontSize: 16,
-  },
-});
diff --git a/app/(tabs)/addProperty.tsx b/app/(tabs)/addProperty.tsx
deleted file mode 100644
index 8db7317..0000000
--- a/app/(tabs)/addProperty.tsx
+++ /dev/null
@@ -1,360 +0,0 @@
-// app/(tabs)/addProperty.tsx
-
-import React, { useState } from "react";
-import { View, ScrollView, StyleSheet, TouchableOpacity, Alert } from "react-native";
-import { TextInput, Button, Text, Snackbar } from "react-native-paper";
-import { useForm, Controller } from "react-hook-form";
-import * as ImagePicker from "expo-image-picker";
-import { Ionicons } from "@expo/vector-icons";
-import { Image } from "expo-image";
-import { useRouter } from "expo-router";
-import { savePropertyToMock } from "../../lib/mockData";
-
-const PROPERTY_TYPES = ["Building", "Villa", "Commercial"];
-
-const AddProperty = () => {
-  const router = useRouter();
-  const {
-    control,
-    handleSubmit,
-    watch,
-    reset,
-    formState: { errors },
-  } = useForm();
-  
-  const [image, setImage] = useState<string | undefined>(undefined);
-  const [snackbarVisible, setSnackbarVisible] = useState(false);
-  const [snackbarMessage, setSnackbarMessage] = useState("");
-  const [showOptions, setShowOptions] = useState(false);
-
-  const selectedType = watch("propertyType");
-
-  const pickImage = async () => {
-    const result = await ImagePicker.launchImageLibraryAsync({
-      mediaTypes: ImagePicker.MediaTypeOptions.Images,
-      allowsEditing: true,
-      aspect: [4, 3],
-      quality: 1,
-    });
-
-    if (!result.canceled) {
-      setImage(result.assets[0].uri);
-    }
-  };
-
-  const onSubmit = async (data: any) => {
-    try {
-      const property = {
-        id: Date.now().toString(),
-        name: data.propertyName,
-        type: data.propertyType.toLowerCase(),
-        address: data.address || '',
-        state: data.state || '',
-        city: data.city || '',
-        annualRent: data.annualRent ? Number(data.annualRent) : undefined,
-        imageUrl: image,
-        units: [],
-      };
-      await savePropertyToMock(property);
-
-      setSnackbarMessage("Property added successfully!");
-      setSnackbarVisible(true);
-      reset();
-      setImage(undefined);
-
-      setTimeout(() => {
-        router.replace("/(tabs)/dashboard");
-      }, 500);
-    } catch (err) {
-      Alert.alert("Error", "Failed to save property.");
-    }
-  };
-
-  return (
-    <View style={styles.container}>
-      <View style={styles.header}>
-        <TouchableOpacity onPress={() => router.back()} style={styles.backButton}>
-          <Ionicons name="arrow-back" size={24} color="white" />
-        </TouchableOpacity>
-        <Text style={styles.headerText}>Add Property</Text>
-      </View>
-
-      <ScrollView contentContainerStyle={styles.scrollContainer}>
-        {/* Property Name */}
-        <Controller
-          control={control}
-          name="propertyName"
-          rules={{ required: "Name is required" }}
-          render={({ field: { onChange, value } }) => (
-            <TextInput
-              label="Property Name *"
-              value={value}
-              onChangeText={onChange}
-              style={styles.input}
-              error={!!errors.propertyName}
-            />
-          )}
-        />
-
-        {/* Property Type */}
-        <Controller
-          control={control}
-          name="propertyType"
-          rules={{ required: "Type is required" }}
-          render={({ field: { onChange, value } }) => (
-            <View style={styles.input}>
-              <TouchableOpacity
-                onPress={() => setShowOptions(!showOptions)}
-                style={{
-                  backgroundColor: "#fff",
-                  borderWidth: 1,
-                  borderColor: errors.propertyType ? "red" : "#ccc",
-                  borderRadius: 5,
-                  padding: 15,
-                  justifyContent: "center",
-                }}
-              >
-                <Text style={{ color: value ? "#000" : "#aaa" }}>
-                  {value || "Select Property Type"}
-                </Text>
-              </TouchableOpacity>
-              {showOptions && (
-                <View style={{
-                  backgroundColor: "#fff",
-                  borderWidth: 1,
-                  borderColor: "#ccc",
-                  borderRadius: 5,
-                  marginTop: 5,
-                  overflow: "hidden",
-                }}>
-                  {PROPERTY_TYPES.map((option) => (
-                    <TouchableOpacity
-                      key={option}
-                      onPress={() => {
-                        onChange(option);
-                        setShowOptions(false);
-                      }}
-                      style={{ padding: 15 }}
-                    >
-                      <Text>{option}</Text>
-                    </TouchableOpacity>
-                  ))}
-                </View>
-              )}
-              {errors.propertyType?.message && (
-                <Text style={{ color: 'red', marginTop: 4 }}>
-                  {errors.propertyType.message.toString()}
-                </Text>
-              )}
-            </View>
-          )}
-        />
-
-        {/* Address */}
-        <Controller
-          control={control}
-          name="address"
-          render={({ field: { onChange, value } }) => (
-            <TextInput
-              label="Address"
-              value={value}
-              onChangeText={onChange}
-              style={styles.input}
-            />
-          )}
-        />
-
-        {/* State */}
-        <Controller
-          control={control}
-          name="state"
-          render={({ field: { onChange, value } }) => (
-            <TextInput
-              label="State"
-              value={value}
-              onChangeText={onChange}
-              style={styles.input}
-            />
-          )}
-        />
-
-        {/* City */}
-        <Controller
-          control={control}
-          name="city"
-          render={({ field: { onChange, value } }) => (
-            <TextInput
-              label="City"
-              value={value}
-              onChangeText={onChange}
-              style={styles.input}
-            />
-          )}
-        />
-
-        {/* Additional Fields */}
-        {selectedType === "Villa" && (
-          <>
-            <Controller
-              control={control}
-              name="annualRent"
-              render={({ field: { onChange, value } }) => (
-                <TextInput
-                  label="Annual Rent (SAR)"
-                  keyboardType="numeric"
-                  value={value}
-                  onChangeText={onChange}
-                  style={styles.input}
-                />
-              )}
-            />
-            <Controller
-              control={control}
-              name="floors"
-              render={({ field: { onChange, value } }) => (
-                <TextInput
-                  label="Number of Floors"
-                  keyboardType="numeric"
-                  value={value}
-                  onChangeText={onChange}
-                  style={styles.input}
-                />
-              )}
-            />
-            <Controller
-              control={control}
-              name="bedrooms"
-              render={({ field: { onChange, value } }) => (
-                <TextInput
-                  label="Bedrooms"
-                  keyboardType="numeric"
-                  value={value}
-                  onChangeText={onChange}
-                  style={styles.input}
-                />
-              )}
-            />
-            <Controller
-              control={control}
-              name="bathrooms"
-              render={({ field: { onChange, value } }) => (
-                <TextInput
-                  label="Bathrooms"
-                  keyboardType="numeric"
-                  value={value}
-                  onChangeText={onChange}
-                  style={styles.input}
-                />
-              )}
-            />
-          </>
-        )}
-
-        {selectedType === "Commercial" && (
-          <Controller
-            control={control}
-            name="annualRent"
-            render={({ field: { onChange, value } }) => (
-              <TextInput
-                label="Annual Rent (SAR)"
-                keyboardType="numeric"
-                value={value}
-                onChangeText={onChange}
-                style={styles.input}
-              />
-            )}
-          />
-        )}
-
-        {/* Image Picker */}
-        <TouchableOpacity onPress={pickImage} style={styles.imagePicker}>
-          {image ? (
-            <Image source={{ uri: image }} style={styles.image} />
-          ) : (
-            <View style={{ alignItems: "center" }}>
-              <Ionicons name="cloud-upload-outline" size={24} color="#17b8a6" />
-              <Text style={{ color: "#17b8a6" }}>Upload Property Image</Text>
-            </View>
-          )}
-        </TouchableOpacity>
-
-        {/* Save Button */}
-        <Button
-          mode="contained"
-          onPress={handleSubmit(onSubmit)}
-          style={styles.button}
-          contentStyle={{ paddingVertical: 5 }}
-        >
-          Save Property
-        </Button>
-
-        {/* Snackbar */}
-        <Snackbar
-          visible={snackbarVisible}
-          onDismiss={() => setSnackbarVisible(false)}
-          duration={3000}
-        >
-          {snackbarMessage}
-        </Snackbar>
-      </ScrollView>
-    </View>
-  );
-};
-
-export default AddProperty;
-
-const styles = StyleSheet.create({
-  container: {
-    flex: 1,
-    backgroundColor: "#F5F7FA",
-  },
-  scrollContainer: {
-    padding: 20,
-    paddingBottom: 40,
-  },
-  header: {
-    backgroundColor: "#17b8a6",
-    padding: 15,
-    flexDirection: "row",
-    alignItems: "center",
-    elevation: 5,
-    shadowColor: "#000",
-    shadowOffset: { width: 0, height: 2 },
-    shadowOpacity: 0.2,
-    shadowRadius: 2,
-  },
-  backButton: {
-    marginRight: 15,
-    padding: 5,
-  },
-  headerText: {
-    fontSize: 20,
-    fontWeight: "bold",
-    color: "#ffffff",
-    flex: 1,
-  },
-  input: {
-    marginBottom: 10,
-    backgroundColor: "#FFFFFF",
-  },
-  imagePicker: {
-    borderWidth: 1,
-    borderColor: "#dff8eb",
-    borderStyle: "dashed",
-    borderRadius: 5,
-    padding: 20,
-    alignItems: "center",
-    justifyContent: "center",
-    marginVertical: 15,
-    minHeight: 150,
-  },
-  image: {
-    width: "100%",
-    height: 200,
-    borderRadius: 5,
-  },
-  button: {
-    marginTop: 10,
-    backgroundColor: "#17b8a6",
-  },
-});
diff --git a/app/(tabs)/addTenant.tsx b/app/(tabs)/addTenant.tsx
deleted file mode 100644
index 78a25e9..0000000
--- a/app/(tabs)/addTenant.tsx
+++ /dev/null
@@ -1,261 +0,0 @@
-import React, { useState } from "react";
-import { View, ScrollView, StyleSheet, TouchableOpacity, Alert, Image } from "react-native";
-import { TextInput, Button, Text, ActivityIndicator, Snackbar } from "react-native-paper";
-import { useForm, Controller } from "react-hook-form";
-import * as ImagePicker from "expo-image-picker";
-import { useRouter, useLocalSearchParams } from 'expo-router';
-import { Ionicons } from '@expo/vector-icons';
-import { saveTenantToMock } from "../../lib/mockData";
-
-interface TenantFormData {
-  name: string;
-  email: string;
-  phone: string;
-  state?: string;
-  city?: string;
-}
-
-const AddTenant = () => {
-  const router = useRouter();
-  const { propertyId, unitId } = useLocalSearchParams<{ propertyId: string, unitId: string }>();
-
-  const { control, handleSubmit, reset, formState: { errors } } = useForm<TenantFormData>();
-  const [image, setImage] = useState<string | null>(null);
-  const [loading, setLoading] = useState(false);
-  const [snackbarVisible, setSnackbarVisible] = useState(false);
-  const [snackbarMessage, setSnackbarMessage] = useState("");
-
-  const pickImage = async () => {
-    let result = await ImagePicker.launchImageLibraryAsync({
-      mediaTypes: ImagePicker.MediaTypeOptions.Images,
-      allowsEditing: true,
-      aspect: [4, 3],
-      quality: 1,
-    });
-
-    if (!result.canceled) {
-      setImage(result.assets[0].uri);
-    }
-  };
-
-  const onSubmit = async (data: TenantFormData) => {
-    if (!propertyId || !unitId) {
-      Alert.alert("Error", "Missing property or unit information.");
-      return;
-    }
-
-    try {
-      setLoading(true);
-
-      const tenant = {
-        id: Date.now().toString(),
-        name: data.name,
-        email: data.email,
-        phone: data.phone,
-        state: data.state || '',
-        city: data.city || '',
-        imageUrl: image || undefined,
-      };
-
-      await saveTenantToMock(propertyId, unitId, tenant);
-
-      setSnackbarMessage("Tenant added and linked successfully!");
-      setSnackbarVisible(true);
-      reset();
-      setImage(null);
-
-      setTimeout(() => {
-        router.replace("/(tabs)/properties");
-      }, 1000);
-
-    } catch (error) {
-      console.error("Failed to add tenant:", error);
-      Alert.alert("Error", "Failed to add tenant. Please try again.");
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  return (
-    <ScrollView contentContainerStyle={styles.scrollContainer}>
-      <View style={styles.container}>
-        <View style={styles.header}>
-          <TouchableOpacity onPress={() => router.back()} style={{ marginRight: 10 }}>
-            <Ionicons name="arrow-back" size={24} color="white" />
-          </TouchableOpacity>
-          <Text style={styles.headerText}>Add Tenant</Text>
-          <View style={{ width: 24 }} />
-        </View>
-
-        <Controller
-          control={control}
-          name="name"
-          defaultValue=""
-          rules={{ required: "Name is required" }}
-          render={({ field: { onChange, value } }) => (
-            <TextInput
-              label="Name"
-              value={value}
-              onChangeText={onChange}
-              style={styles.input}
-              error={!!errors.name}
-            />
-          )}
-        />
-        {errors.name && <Text style={styles.errorText}>{errors.name.message}</Text>}
-
-        <Controller
-          control={control}
-          name="email"
-          defaultValue=""
-          rules={{
-            required: "Email is required",
-            pattern: {
-              value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
-              message: "Invalid email address"
-            }
-          }}
-          render={({ field: { onChange, value } }) => (
-            <TextInput
-              label="Email"
-              value={value}
-              onChangeText={onChange}
-              style={styles.input}
-              error={!!errors.email}
-            />
-          )}
-        />
-        {errors.email && <Text style={styles.errorText}>{errors.email.message}</Text>}
-
-        <Controller
-          control={control}
-          name="phone"
-          defaultValue=""
-          rules={{ required: "Phone number is required" }}
-          render={({ field: { onChange, value } }) => (
-            <TextInput
-              label="Phone"
-              value={value}
-              onChangeText={onChange}
-              style={styles.input}
-              keyboardType="phone-pad"
-              error={!!errors.phone}
-            />
-          )}
-        />
-        {errors.phone && <Text style={styles.errorText}>{errors.phone.message}</Text>}
-
-        <Controller
-          control={control}
-          name="state"
-          defaultValue=""
-          render={({ field: { onChange, value } }) => (
-            <TextInput label="State" value={value} onChangeText={onChange} style={styles.input} />
-          )}
-        />
-
-        <Controller
-          control={control}
-          name="city"
-          defaultValue=""
-          render={({ field: { onChange, value } }) => (
-            <TextInput label="City" value={value} onChangeText={onChange} style={styles.input} />
-          )}
-        />
-
-        <TouchableOpacity onPress={pickImage} style={styles.imagePicker}>
-          {image ? <Image source={{ uri: image }} style={styles.image} /> : <Text>+ Upload Image</Text>}
-        </TouchableOpacity>
-
-        <Button
-          mode="contained"
-          onPress={handleSubmit(onSubmit)}
-          style={styles.button}
-          disabled={loading}
-        >
-          {loading ? (
-            <ActivityIndicator animating={true} color="white" />
-          ) : (
-            "Submit"
-          )}
-        </Button>
-
-        <Snackbar
-          visible={snackbarVisible}
-          onDismiss={() => setSnackbarVisible(false)}
-          duration={3000}
-          style={styles.snackbar}
-          action={{
-            label: 'OK',
-            onPress: () => setSnackbarVisible(false),
-          }}
-        >
-          {snackbarMessage}
-        </Snackbar>
-      </View>
-    </ScrollView>
-  );
-};
-
-export default AddTenant;
-
-const styles = StyleSheet.create({
-  scrollContainer: {
-    paddingBottom: 20,
-  },
-  container: {
-    padding: 20,
-    backgroundColor: "#fff",
-    flex: 1,
-  },
-  header: {
-    flexDirection: 'row',
-    alignItems: 'center',
-    backgroundColor: '#009688',
-    paddingVertical: 10,
-    paddingHorizontal: 15,
-    borderRadius: 5,
-    marginBottom: 20,
-    justifyContent: 'space-between',
-  },
-  headerText: {
-    color: 'white',
-    fontSize: 18,
-    fontWeight: 'bold',
-  },
-  input: {
-    marginBottom: 5,
-    backgroundColor: "#dff8eb",
-  },
-  errorText: {
-    color: 'red',
-    fontSize: 12,
-    marginBottom: 10,
-    marginLeft: 5,
-  },
-  imagePicker: {
-    borderWidth: 1,
-    borderColor: "#dff8eb",
-    borderRadius: 5,
-    padding: 20,
-    alignItems: "center",
-    justifyContent: "center",
-    marginBottom: 20,
-  },
-  image: {
-    width: 100,
-    height: 100,
-    borderRadius: 5,
-  },
-  button: {
-    marginTop: 10,
-    backgroundColor: '#009688',
-  },
-  snackbar: {
-    backgroundColor: '#4CAF50',
-    position: 'absolute',
-    bottom: 10,
-    left: 20,
-    right: 20,
-  },
-});
\ No newline at end of file
diff --git a/app/(tabs)/addUnit.tsx b/app/(tabs)/addUnit.tsx
deleted file mode 100644
index 9ddcd78..0000000
--- a/app/(tabs)/addUnit.tsx
+++ /dev/null
@@ -1,187 +0,0 @@
-// app/(tabs)/addUnit.tsx
-
-import React, { useState } from 'react';
-import { View, Text, TextInput, TouchableOpacity, StyleSheet, ScrollView, Alert } from 'react-native';
-import { Ionicons } from '@expo/vector-icons';
-import { useRouter, useLocalSearchParams } from 'expo-router';
-import { addUnitToProperty } from '../../lib/mockData';
-
-const AddUnit = () => {
-  const router = useRouter();
-  const { propertyId } = useLocalSearchParams<{ propertyId: string }>();
-
-  const [size, setSize] = useState('');
-  const [bedrooms, setBedrooms] = useState('');
-  const [bathrooms, setBathrooms] = useState('');
-  const [rentAmount, setRentAmount] = useState('');
-  const [floorNumber, setFloorNumber] = useState('');
-  const [notes, setNotes] = useState('');
-  const [quantity, setQuantity] = useState('1');
-
-  const handleSave = async () => {
-    if (!size || !bedrooms || !bathrooms || !rentAmount || !floorNumber || isNaN(Number(quantity))) {
-      Alert.alert('Error', 'Please fill all required fields correctly.');
-      return;
-    }
-
-    try {
-      const numberOfUnits = Math.max(1, parseInt(quantity));
-
-      for (let i = 0; i < numberOfUnits; i++) {
-        await addUnitToProperty(propertyId!, {
-            id: Date.now().toString() + '-' + i,
-            propertyId: propertyId!,
-            size: Number(size),
-            bedrooms: Number(bedrooms),
-            rentAmount: Number(rentAmount),
-            status: 'vacant',
-            startDate: undefined,
-            tenantId: undefined,
-            payments: [],
-            floorNumber: Number(floorNumber),
-            notes: notes.trim() !== '' ? notes : undefined,
-          });
-          
-      }
-
-      Alert.alert('Success', `${numberOfUnits} Unit(s) added successfully!`);
-      router.back();
-    } catch (error) {
-      console.error('Error adding unit:', error);
-      Alert.alert('Error', 'Failed to add unit.');
-    }
-  };
-
-  return (
-    <ScrollView style={styles.container}>
-      <View style={styles.header}>
-        <TouchableOpacity onPress={() => router.back()}>
-          <Ionicons name="arrow-back" size={24} color="white" />
-        </TouchableOpacity>
-        <Text style={styles.headerTitle}>Add Unit</Text>
-        <View style={{ width: 30 }} />
-      </View>
-
-      <View style={styles.formContainer}>
-        <Text style={styles.label}>Size (m²)</Text>
-        <TextInput
-          style={styles.input}
-          keyboardType="numeric"
-          value={size}
-          onChangeText={setSize}
-          placeholder="Enter size in square meters"
-        />
-
-        <Text style={styles.label}>Bedrooms</Text>
-        <TextInput
-          style={styles.input}
-          keyboardType="numeric"
-          value={bedrooms}
-          onChangeText={setBedrooms}
-          placeholder="Enter number of bedrooms"
-        />
-
-        <Text style={styles.label}>Bathrooms</Text>
-        <TextInput
-          style={styles.input}
-          keyboardType="numeric"
-          value={bathrooms}
-          onChangeText={setBathrooms}
-          placeholder="Enter number of bathrooms"
-        />
-
-        <Text style={styles.label}>Rent Amount (SAR)</Text>
-        <TextInput
-          style={styles.input}
-          keyboardType="numeric"
-          value={rentAmount}
-          onChangeText={setRentAmount}
-          placeholder="Enter rent amount"
-        />
-
-        <Text style={styles.label}>Floor Number</Text>
-        <TextInput
-          style={styles.input}
-          keyboardType="numeric"
-          value={floorNumber}
-          onChangeText={setFloorNumber}
-          placeholder="Enter floor number"
-        />
-
-        <Text style={styles.label}>Notes (Optional)</Text>
-        <TextInput
-          style={[styles.input, { height: 80 }]}
-          multiline
-          value={notes}
-          onChangeText={setNotes}
-          placeholder="Write any notes..."
-        />
-
-        <Text style={styles.label}>Number of Identical Units</Text>
-        <TextInput
-          style={styles.input}
-          keyboardType="numeric"
-          value={quantity}
-          onChangeText={setQuantity}
-          placeholder="1"
-        />
-
-        <TouchableOpacity style={styles.saveButton} onPress={handleSave}>
-          <Text style={styles.saveButtonText}>Save Unit(s)</Text>
-        </TouchableOpacity>
-      </View>
-    </ScrollView>
-  );
-};
-
-export default AddUnit;
-
-const styles = StyleSheet.create({
-  container: {
-    flex: 1,
-    backgroundColor: '#F5F7FA',
-  },
-  header: {
-    flexDirection: 'row',
-    alignItems: 'center',
-    backgroundColor: '#17b8a6',
-    padding: 15,
-    justifyContent: 'space-between',
-  },
-  headerTitle: {
-    color: 'white',
-    fontSize: 18,
-    fontWeight: 'bold',
-  },
-  formContainer: {
-    padding: 20,
-  },
-  label: {
-    fontSize: 14,
-    fontWeight: 'bold',
-    color: '#333',
-    marginBottom: 5,
-  },
-  input: {
-    backgroundColor: '#fff',
-    borderWidth: 1,
-    borderColor: '#dcdcdc',
-    borderRadius: 8,
-    paddingHorizontal: 10,
-    paddingVertical: 8,
-    marginBottom: 15,
-    fontSize: 14,
-  },
-  saveButton: {
-    backgroundColor: '#17b8a6',
-    paddingVertical: 14,
-    borderRadius: 8,
-    marginTop: 10,
-    alignItems: 'center',
-  },
-  saveButtonText: {
-    color: 'white',
-    fontWeight: 'bold',
-    fontSize: 16,
-  },
-});
diff --git a/app/(tabs)/dashboard.tsx b/app/(tabs)/dashboard.tsx
index 8a409f6..ec7e1da 100644
--- a/app/(tabs)/dashboard.tsx
+++ b/app/(tabs)/dashboard.tsx
@@ -1,9 +1,6 @@
-// app/(tabs)/dashboard.tsx
-
 import React, { useState, useEffect } from "react";
 import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Alert, ActivityIndicator, Modal } from "react-native";
 import { Ionicons } from "@expo/vector-icons";
-import { Image } from "expo-image";
 import { useRouter } from "expo-router";
 import Navbar from "../(tabs)/navbar";
 import { getAllProperties, deletePropertyFromMock } from "../../lib/mockData";
@@ -17,13 +14,8 @@ const Dashboard = () => {
   const [menuVisible, setMenuVisible] = useState(false);
   const [selectedPropertyId, setSelectedPropertyId] = useState<string | null>(null);
   const [deleteLoading, setDeleteLoading] = useState(false);
-
-  const images = {
-    addNew: require("../../assets/images/addnew.png"),
-    payReport: require("../../assets/images/payreport.png"),
-    addTenant: require("../../assets/images/addten.png"),
-    building: require("../../assets/images/build.png"),
-  };
+  const [currentPage, setCurrentPage] = useState(1);
+  const totalPages = 2;
 
   useEffect(() => {
     const fetchData = async () => {
@@ -77,7 +69,6 @@ const Dashboard = () => {
       setMenuVisible(false);
 
       await deletePropertyFromMock(idToDelete);
-
       await refreshProperties();
 
       Alert.alert("Success", "Property deleted successfully");
@@ -111,7 +102,6 @@ const Dashboard = () => {
     });
 
     const netProfit = totalIncome - (totalExpenses + totalOperatingCosts);
-
     return { totalIncome, totalExpenses, totalOperatingCosts, netProfit, totalUnits, occupiedUnits, vacantUnits };
   };
 
@@ -125,11 +115,11 @@ const Dashboard = () => {
       </View>
     );
   }
+
   return (
     <View style={styles.mainContainer}>
       {navVisible && <Navbar closeNav={closeNav} />}
 
-      {/* Delete loading overlay */}
       {deleteLoading && (
         <View style={styles.loadingOverlay}>
           <ActivityIndicator size="large" color="#17b8a6" />
@@ -138,130 +128,92 @@ const Dashboard = () => {
       )}
 
       <ScrollView style={styles.container}>
-        {/* Header */}
         <View style={styles.header}>
           <TouchableOpacity onPress={toggleNav}>
             <Ionicons name="menu" size={28} color="white" />
           </TouchableOpacity>
           <Text style={styles.headerTitle}>Dashboard</Text>
-          <View style={styles.headerRight}>
-            <TouchableOpacity onPress={() => router.push("/(tabs)/notification")} style={styles.headerIcon}>
-              <Ionicons name="notifications-outline" size={24} color="white" />
-            </TouchableOpacity>
-          </View>
-        </View>
-
-        {/* Welcome Section */}
-        <View style={styles.welcomeContainer}>
-          <Text style={styles.welcomeText}>Welcome back!</Text>
+          <TouchableOpacity onPress={() => router.push("/(tabs)/notification")}>
+            <Ionicons name="notifications-outline" size={24} color="white" />
+          </TouchableOpacity>
         </View>
 
-        {/* If no properties exist, show Add First Property */}
         {properties.length === 0 && (
           <View style={styles.noProperties}>
             <Text style={styles.noPropertiesText}>You don't have any properties yet.</Text>
-            <TouchableOpacity 
+            <TouchableOpacity
               style={styles.addPropertyButton}
-              onPress={() => router.push("/(tabs)/addProperty")}
+              onPress={() => router.push("/(tabs)/properties/addProperty")}
             >
               <Text style={styles.addPropertyButtonText}>+ Add Your First Property</Text>
             </TouchableOpacity>
           </View>
         )}
 
-        {/* Quick Actions */}
-        <View style={styles.quickActions}>
-          <TouchableOpacity 
-            style={styles.quickAction}
-            onPress={() => router.push("/(tabs)/addPayment")}
-          >
-            <Ionicons name="cash-outline" size={28} color="#17b8a6" />
-            <Text style={styles.actionText}>Add Payment</Text>
-          </TouchableOpacity>
-
-          <TouchableOpacity 
-            style={styles.quickAction}
-            onPress={() => router.push("/(tabs)/addExpense")}
-          >
-            <Ionicons name="receipt-outline" size={28} color="#17b8a6" />
-            <Text style={styles.actionText}>Add Expense</Text>
-          </TouchableOpacity>
-        </View>
+        {currentPage === 1 && (
+          <>
+            <View style={styles.welcomeContainer}>
+              <Text style={styles.welcomeText}>Welcome back!</Text>
+            </View>
+
+            <View style={styles.quickActions}>
+              <TouchableOpacity style={styles.quickAction} onPress={() => router.push("/(tabs)/payments/addPayment")}>
+                <Ionicons name="cash-outline" size={28} color="#17b8a6" />
+                <Text style={styles.actionText}>Add Payment</Text>
+              </TouchableOpacity>
+              <TouchableOpacity style={styles.quickAction} onPress={() => router.push("/(tabs)/expenses/addExpense")}>
+                <Ionicons name="receipt-outline" size={28} color="#17b8a6" />
+                <Text style={styles.actionText}>Add Expense</Text>
+              </TouchableOpacity>
+            </View>
+
+            <View style={styles.summaryContainer}>
+              <View style={styles.summaryCard}><Text>Total Properties</Text><Text style={styles.count}>{properties.length}</Text></View>
+              <View style={styles.summaryCard}><Text>Total Units</Text><Text style={styles.count}>{totalUnits}</Text></View>
+              <View style={styles.summaryCard}><Text>Units Occupied</Text><Text style={styles.count}>{occupiedUnits}</Text></View>
+              <View style={styles.summaryCard}><Text>Units Vacant</Text><Text style={styles.count}>{vacantUnits}</Text></View>
+              <View style={styles.summaryCard}><Text>Total Income</Text><Text style={styles.count}>{totalIncome.toLocaleString()} SAR</Text></View>
+              <View style={styles.summaryCard}><Text>Total Expenses</Text><Text style={styles.count}>{totalExpenses.toLocaleString()} SAR</Text></View>
+              <View style={styles.summaryCard}><Text>Operating Costs</Text><Text style={styles.count}>{totalOperatingCosts.toLocaleString()} SAR</Text></View>
+              <View style={styles.summaryCard}>
+                <Text>Net Profit</Text>
+                <Text style={[styles.count, { color: netProfit >= 0 ? "#17b8a6" : "red" }]}>{netProfit.toLocaleString()} SAR</Text>
+              </View>
+            </View>
+          </>
+        )}
 
-        {/* Summary Cards */}
-        <View style={styles.summaryContainer}>
-          <View style={styles.summaryCard}>
-            <Text>Total Properties</Text>
-            <Text style={styles.count}>{properties.length}</Text>
-          </View>
-          <View style={styles.summaryCard}>
-            <Text>Total Units</Text>
-            <Text style={styles.count}>{totalUnits}</Text>
-          </View>
-          <View style={styles.summaryCard}>
-            <Text>Units Occupied</Text>
-            <Text style={styles.count}>{occupiedUnits}</Text>
-          </View>
-          <View style={styles.summaryCard}>
-            <Text>Units Vacant</Text>
-            <Text style={styles.count}>{vacantUnits}</Text>
-          </View>
-          <View style={styles.summaryCard}>
-            <Text>Total Income</Text>
-            <Text style={styles.count}>{totalIncome.toLocaleString()} SAR</Text>
-          </View>
-          <View style={styles.summaryCard}>
-            <Text>Total Expenses</Text>
-            <Text style={styles.count}>{totalExpenses.toLocaleString()} SAR</Text>
-          </View>
-          <View style={styles.summaryCard}>
-            <Text>Operating Costs</Text>
-            <Text style={styles.count}>{totalOperatingCosts.toLocaleString()} SAR</Text>
-          </View>
-          <View style={styles.summaryCard}>
-            <Text>Net Profit</Text>
-            <Text style={[styles.count, { color: netProfit >= 0 ? "#17b8a6" : "red" }]}>
-              {netProfit.toLocaleString()} SAR
-            </Text>
-          </View>
-        </View>
-        {/* Recent Activities */}
-        <Text style={styles.sectionTitle}>Recent Activity</Text>
+        {currentPage === 2 && (
+          <>
+            <Text style={styles.sectionTitle}>Recent Activity</Text>
+            <View style={styles.activityContainer}>
+              <Text style={styles.noActivitiesText}>No recent activities yet.</Text>
+            </View>
+          </>
+        )}
 
-        {/* لو عندنا أنشطة نعرضها هنا */}
-        <View style={styles.activityContainer}>
-          {/* حاليا ماعندنا أنشطة حقيقية فنعرض رسالة افتراضية */}
-          <Text style={styles.noActivitiesText}>No recent activities yet.</Text>
+        <View style={styles.paginationControls}>
+          {currentPage > 1 && (
+            <TouchableOpacity style={styles.pageButton} onPress={() => setCurrentPage(currentPage - 1)}>
+              <Text style={styles.pageButtonText}>Previous</Text>
+            </TouchableOpacity>
+          )}
+          {currentPage < totalPages && (
+            <TouchableOpacity style={styles.pageButton} onPress={() => setCurrentPage(currentPage + 1)}>
+              <Text style={styles.pageButtonText}>Next</Text>
+            </TouchableOpacity>
+          )}
         </View>
-
       </ScrollView>
 
-      {/* Action menu modal (لو تحتاجه مستقبلا لحذف أو تعديل عقار) */}
-      <Modal
-        transparent={true}
-        animationType="fade"
-        visible={menuVisible}
-        onRequestClose={() => setMenuVisible(false)}
-      >
-        <TouchableOpacity 
-          style={styles.modalOverlay} 
-          activeOpacity={1}
-          onPress={() => setMenuVisible(false)}
-        >
+      <Modal transparent={true} animationType="fade" visible={menuVisible} onRequestClose={() => setMenuVisible(false)}>
+        <TouchableOpacity style={styles.modalOverlay} activeOpacity={1} onPress={() => setMenuVisible(false)}>
           <View style={styles.menuContainer}>
-            <TouchableOpacity 
-              style={styles.menuItem} 
-              onPress={handleDeleteProperty}
-              activeOpacity={0.7}
-            >
+            <TouchableOpacity style={styles.menuItem} onPress={handleDeleteProperty} activeOpacity={0.7}>
               <Ionicons name="trash-outline" size={24} color="#ff4d4d" />
               <Text style={styles.deleteText}>Delete Property</Text>
             </TouchableOpacity>
-            <TouchableOpacity 
-              style={styles.menuItem} 
-              onPress={() => setMenuVisible(false)}
-              activeOpacity={0.7}
-            >
+            <TouchableOpacity style={styles.menuItem} onPress={() => setMenuVisible(false)} activeOpacity={0.7}>
               <Ionicons name="close-outline" size={24} color="#666" />
               <Text style={styles.menuText}>Cancel</Text>
             </TouchableOpacity>
@@ -271,184 +223,90 @@ const Dashboard = () => {
     </View>
   );
 };
+
 const styles = StyleSheet.create({
-  mainContainer: {
-    flex: 1,
-    position: "relative",
-  },
-  container: { 
-    flex: 1, 
-    backgroundColor: "#fff"
-  },
-  loadingContainer: {
-    flex: 1,
-    justifyContent: "center",
-    alignItems: "center",
-    backgroundColor: "#fff",
-  },
-  loadingText: {
-    marginTop: 10,
-    fontSize: 16,
-    color: "#666",
-  },
+  mainContainer: { flex: 1 },
+  container: { flex: 1, backgroundColor: "#fff" },
+  loadingContainer: { flex: 1, justifyContent: "center", alignItems: "center", backgroundColor: "#fff" },
+  loadingText: { marginTop: 10, fontSize: 16, color: "#666" },
   loadingOverlay: {
-    position: 'absolute',
-    top: 0,
-    left: 0,
-    right: 0,
-    bottom: 0,
-    backgroundColor: 'rgba(255, 255, 255, 0.8)',
-    justifyContent: 'center',
-    alignItems: 'center',
-    zIndex: 999,
-  },
-  header: { 
-    flexDirection: "row", 
-    justifyContent: "space-between", 
-    alignItems: "center", 
-    backgroundColor: "#17b8a6", 
-    padding: 15,
-    marginBottom: 10
-  },
-  headerTitle: { 
-    fontSize: 18, 
-    color: "white", 
-    fontWeight: "bold" 
-  },
-  headerRight: {
-    flexDirection: "row",
-    alignItems: "center",
-  },
-  headerIcon: {
-    marginLeft: 15,
-  },
-  welcomeContainer: { 
-    padding: 15 
-  },
-  welcomeText: { 
-    fontSize: 18, 
-    fontWeight: "bold" 
-  },
-  quickActions: { 
-    flexDirection: "row", 
-    justifyContent: "space-around", 
-    paddingVertical: 15,
-    paddingHorizontal: 15
-  },
-  quickAction: { 
-    alignItems: "center", 
-    padding: 10, 
-    backgroundColor: "#f5f5f5", 
-    borderRadius: 10, 
-    width: 120,
-    shadowColor: "#000",
-    shadowOffset: { width: 0, height: 2 },
-    shadowOpacity: 0.1,
-    shadowRadius: 3,
-    elevation: 2
-  },
-  actionText: { 
-    fontSize: 12, 
-    marginTop: 5, 
-    textAlign: "center" 
+    position: 'absolute', top: 0, left: 0, right: 0, bottom: 0,
+    backgroundColor: 'rgba(255, 255, 255, 0.8)', justifyContent: 'center', alignItems: 'center', zIndex: 999,
   },
-  summaryContainer: { 
-    marginBottom: 10,
-    paddingHorizontal: 15
+  header: {
+    flexDirection: "row", justifyContent: "space-between", alignItems: "center",
+    backgroundColor: "#17b8a6", padding: 15, marginBottom: 10
   },
-  summaryCard: { 
-    flexDirection: "row", 
-    justifyContent: "space-between", 
-    backgroundColor: "#dff8eb", 
-    padding: 15, 
-    marginVertical: 5, 
-    borderRadius: 10 
+  headerTitle: { fontSize: 18, color: "white", fontWeight: "bold" },
+  welcomeContainer: { padding: 15 },
+  welcomeText: { fontSize: 18, fontWeight: "bold" },
+  quickActions: {
+    flexDirection: "row", justifyContent: "space-around",
+    paddingVertical: 15, paddingHorizontal: 15
   },
-  count: { 
-    fontSize: 18, 
-    fontWeight: "bold", 
-    color: "#17b8a6" 
+  quickAction: {
+    alignItems: "center", padding: 10, backgroundColor: "#f5f5f5",
+    borderRadius: 10, width: 120,
+    shadowColor: "#000", shadowOffset: { width: 0, height: 2 },
+    shadowOpacity: 0.1, shadowRadius: 3, elevation: 2
   },
-  sectionTitle: { 
-    fontSize: 18, 
-    fontWeight: "bold", 
-    marginTop: 15,
-    marginBottom: 5,
-    paddingHorizontal: 15
+  actionText: { fontSize: 12, marginTop: 5, textAlign: "center" },
+  summaryContainer: { marginBottom: 10, paddingHorizontal: 15 },
+  summaryCard: {
+    flexDirection: "row", justifyContent: "space-between",
+    backgroundColor: "#dff8eb", padding: 15, marginVertical: 5, borderRadius: 10
   },
-  noProperties: {
-    padding: 30,
-    alignItems: "center",
-    justifyContent: "center",
-    backgroundColor: "#f5f5f5",
-    margin: 15,
-    borderRadius: 10,
+  count: { fontSize: 18, fontWeight: "bold", color: "#17b8a6" },
+  sectionTitle: { fontSize: 18, fontWeight: "bold", marginTop: 15, marginBottom: 5, paddingHorizontal: 15 },
+  activityContainer: {
+    backgroundColor: "#f5f5f5", padding: 15, marginHorizontal: 15,
+    marginTop: 10, borderRadius: 10
   },
-  noPropertiesText: {
-    fontSize: 16,
-    color: "#666",
-    marginBottom: 15,
+  noActivitiesText: { fontSize: 14, color: "#666", textAlign: "center" },
+  paginationControls: {
+    flexDirection: 'row',
+    justifyContent: 'space-between',
+    paddingHorizontal: 20,
+    marginTop: 20,
+    marginBottom: 30,
   },
-  addPropertyButton: {
-    backgroundColor: "#17b8a6",
+  pageButton: {
     paddingVertical: 10,
     paddingHorizontal: 20,
+    backgroundColor: '#17b8a6',
     borderRadius: 8,
   },
-  addPropertyButtonText: {
-    color: "white",
-    fontWeight: "bold",
+  pageButtonText: {
+    color: 'white',
+    fontWeight: 'bold',
     fontSize: 16,
   },
-  activityContainer: {
-    backgroundColor: "#f5f5f5",
-    padding: 15,
-    marginHorizontal: 15,
-    marginTop: 10,
-    borderRadius: 10,
+  noProperties: {
+    padding: 30, alignItems: "center", justifyContent: "center",
+    backgroundColor: "#f5f5f5", margin: 15, borderRadius: 10,
   },
-  noActivitiesText: {
-    fontSize: 14,
-    color: "#666",
-    textAlign: "center",
+  noPropertiesText: { fontSize: 16, color: "#666", marginBottom: 15 },
+  addPropertyButton: {
+    backgroundColor: "#17b8a6", paddingVertical: 10,
+    paddingHorizontal: 20, borderRadius: 8,
   },
+  addPropertyButtonText: { color: "white", fontWeight: "bold", fontSize: 16 },
   modalOverlay: {
-    flex: 1,
-    backgroundColor: 'rgba(0, 0, 0, 0.5)',
-    justifyContent: 'center',
-    alignItems: 'center',
+    flex: 1, backgroundColor: 'rgba(0, 0, 0, 0.5)',
+    justifyContent: 'center', alignItems: 'center',
   },
   menuContainer: {
-    width: '80%',
-    backgroundColor: 'white',
-    borderRadius: 10,
-    overflow: 'hidden',
-    elevation: 5,
-    shadowColor: '#000',
-    shadowOffset: { width: 0, height: 2 },
-    shadowOpacity: 0.25,
-    shadowRadius: 3.84,
+    width: '80%', backgroundColor: 'white', borderRadius: 10,
+    overflow: 'hidden', elevation: 5,
+    shadowColor: '#000', shadowOffset: { width: 0, height: 2 },
+    shadowOpacity: 0.25, shadowRadius: 3.84,
   },
   menuItem: {
-    flexDirection: 'row',
-    alignItems: 'center',
-    padding: 16,
-    borderBottomWidth: 1,
-    borderBottomColor: '#f0f0f0',
-  },
-  deleteText: {
-    marginLeft: 10,
-    color: '#ff4d4d',
-    fontWeight: '500',
-    fontSize: 16,
+    flexDirection: 'row', alignItems: 'center',
+    padding: 16, borderBottomWidth: 1, borderBottomColor: '#f0f0f0',
   },
-  menuText: {
-    marginLeft: 10,
-    color: '#666',
-    fontWeight: '500',
-    fontSize: 16,
-  }
+  deleteText: { marginLeft: 10, color: '#ff4d4d', fontWeight: '500', fontSize: 16 },
+  menuText: { marginLeft: 10, color: '#666', fontWeight: '500', fontSize: 16 },
 });
 
-export default Dashboard;
-
+export default Dashboard;
\ No newline at end of file
diff --git a/app/(tabs)/editProperty.tsx b/app/(tabs)/editProperty.tsx
deleted file mode 100644
index 2ec544b..0000000
--- a/app/(tabs)/editProperty.tsx
+++ /dev/null
@@ -1,227 +0,0 @@
-// app/(tabs)/editProperty.tsx
-
-import React, { useEffect, useState } from 'react';
-import { View, ScrollView, StyleSheet, TouchableOpacity, Alert } from 'react-native';
-import { TextInput, Button, Text, ActivityIndicator, Snackbar } from 'react-native-paper';
-import { useForm, Controller } from 'react-hook-form';
-import { useRouter, useLocalSearchParams } from 'expo-router';
-import { Ionicons } from '@expo/vector-icons';
-import { getPropertyById, updatePropertyInMock } from '../../lib/mockData';
-
-interface PropertyFormData {
-  name: string;
-  address?: string;
-  state?: string;
-  city?: string;
-  type: 'building' | 'villa' | 'commercial';
-}
-
-const EditProperty = () => {
-  const router = useRouter();
-  const { propertyId } = useLocalSearchParams<{ propertyId: string }>();
-  const { control, handleSubmit, setValue, formState: { errors } } = useForm<PropertyFormData>();
-  const [loading, setLoading] = useState(false);
-  const [snackbarVisible, setSnackbarVisible] = useState(false);
-  const [snackbarMessage, setSnackbarMessage] = useState('');
-
-  useEffect(() => {
-    const loadProperty = async () => {
-      try {
-        const property = await getPropertyById(propertyId!);
-        if (property) {
-          setValue('name', property.name);
-          setValue('address', property.address || '');
-          setValue('state', property.state || '');
-          setValue('city', property.city || '');
-          setValue('type', property.type);
-        }
-      } catch (error) {
-        console.error('Error loading property:', error);
-      }
-    };
-    if (propertyId) loadProperty();
-  }, [propertyId]);
-
-  const onSubmit = async (data: PropertyFormData) => {
-    try {
-      setLoading(true);
-
-      await updatePropertyInMock(propertyId!, {
-        ...data,
-      });
-
-      setSnackbarMessage('Property updated successfully!');
-      setSnackbarVisible(true);
-
-      setTimeout(() => {
-        router.replace('/(tabs)/properties');
-      }, 1000);
-
-    } catch (error) {
-      console.error('Failed to update property:', error);
-      Alert.alert('Error', 'Failed to update property. Please try again.');
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  return (
-    <ScrollView contentContainerStyle={styles.scrollContainer}>
-      <View style={styles.container}>
-        <View style={styles.header}>
-          <TouchableOpacity onPress={() => router.back()}>
-            <Ionicons name="arrow-back" size={24} color="white" />
-          </TouchableOpacity>
-          <Text style={styles.headerText}>Edit Property</Text>
-          <View style={{ width: 24 }} />
-        </View>
-
-        <Controller
-          control={control}
-          name="name"
-          rules={{ required: 'Name is required' }}
-          render={({ field: { onChange, value } }) => (
-            <TextInput
-              label="Name"
-              value={value}
-              onChangeText={onChange}
-              style={styles.input}
-              error={!!errors.name}
-            />
-          )}
-        />
-        {errors.name && <Text style={styles.errorText}>{errors.name.message}</Text>}
-
-        <Controller
-          control={control}
-          name="address"
-          render={({ field: { onChange, value } }) => (
-            <TextInput
-              label="Address"
-              value={value}
-              onChangeText={onChange}
-              style={styles.input}
-            />
-          )}
-        />
-
-        <Controller
-          control={control}
-          name="state"
-          render={({ field: { onChange, value } }) => (
-            <TextInput
-              label="State"
-              value={value}
-              onChangeText={onChange}
-              style={styles.input}
-            />
-          )}
-        />
-
-        <Controller
-          control={control}
-          name="city"
-          render={({ field: { onChange, value } }) => (
-            <TextInput
-              label="City"
-              value={value}
-              onChangeText={onChange}
-              style={styles.input}
-            />
-          )}
-        />
-
-        <Controller
-          control={control}
-          name="type"
-          rules={{ required: 'Type is required' }}
-          render={({ field: { onChange, value } }) => (
-            <TextInput
-              label="Type (building, villa, commercial)"
-              value={value}
-              onChangeText={onChange}
-              style={styles.input}
-              error={!!errors.type}
-            />
-          )}
-        />
-        {errors.type && <Text style={styles.errorText}>{errors.type.message}</Text>}
-
-        <Button
-          mode="contained"
-          onPress={handleSubmit(onSubmit)}
-          style={styles.button}
-          disabled={loading}
-        >
-          {loading ? (
-            <ActivityIndicator animating={true} color="white" />
-          ) : (
-            "Update"
-          )}
-        </Button>
-
-        <Snackbar
-          visible={snackbarVisible}
-          onDismiss={() => setSnackbarVisible(false)}
-          duration={3000}
-          style={styles.snackbar}
-          action={{
-            label: 'OK',
-            onPress: () => setSnackbarVisible(false),
-          }}
-        >
-          {snackbarMessage}
-        </Snackbar>
-      </View>
-    </ScrollView>
-  );
-};
-
-export default EditProperty;
-
-const styles = StyleSheet.create({
-  scrollContainer: {
-    paddingBottom: 20,
-  },
-  container: {
-    padding: 20,
-    backgroundColor: "#fff",
-    flex: 1,
-  },
-  header: {
-    flexDirection: 'row',
-    alignItems: 'center',
-    backgroundColor: '#009688',
-    paddingVertical: 10,
-    paddingHorizontal: 15,
-    borderRadius: 5,
-    marginBottom: 20,
-    justifyContent: 'space-between',
-  },
-  headerText: {
-    color: 'white',
-    fontSize: 18,
-    fontWeight: 'bold',
-  },
-  input: {
-    marginBottom: 5,
-    backgroundColor: "#dff8eb",
-  },
-  errorText: {
-    color: 'red',
-    fontSize: 12,
-    marginBottom: 10,
-    marginLeft: 5,
-  },
-  button: {
-    marginTop: 10,
-    backgroundColor: '#009688',
-  },
-  snackbar: {
-    backgroundColor: '#4CAF50',
-    position: 'absolute',
-    bottom: 10,
-    left: 20,
-    right: 20,
-  },
-});
diff --git a/app/(tabs)/editTenant.tsx b/app/(tabs)/editTenant.tsx
deleted file mode 100644
index db69771..0000000
--- a/app/(tabs)/editTenant.tsx
+++ /dev/null
@@ -1,261 +0,0 @@
-import React, { useEffect, useState } from "react";
-import { View, ScrollView, StyleSheet, TouchableOpacity, Alert, Image } from "react-native";
-import { TextInput, Button, Text, ActivityIndicator, Snackbar } from "react-native-paper"; 
-import { useForm, Controller } from "react-hook-form";
-import * as ImagePicker from "expo-image-picker";
-import { useRouter, useLocalSearchParams } from 'expo-router';
-import { Ionicons } from '@expo/vector-icons';
-import { getTenantById, updateTenantInMock } from "../../lib/mockData";
-
-interface TenantFormData {
-  name: string;
-  email: string;
-  phone: string;
-  state?: string;
-  city?: string;
-}
-
-const EditTenant = () => {
-  const router = useRouter();
-  const { tenantId } = useLocalSearchParams<{ tenantId: string }>();
-
-  const { control, handleSubmit, reset, setValue, formState: { errors } } = useForm<TenantFormData>();
-  const [image, setImage] = useState<string | null>(null);
-  const [loading, setLoading] = useState(false);
-  const [snackbarVisible, setSnackbarVisible] = useState(false);
-  const [snackbarMessage, setSnackbarMessage] = useState("");
-
-  useEffect(() => {
-    const loadTenant = async () => {
-      try {
-        const tenant = await getTenantById(tenantId!);
-        if (tenant) {
-          setValue("name", tenant.name);
-          setValue("email", tenant.email);
-          setValue("phone", tenant.phone);
-          setValue("state", tenant.state || '');
-          setValue("city", tenant.city || '');
-          setImage(tenant.imageUrl || null);
-        }
-      } catch (error) {
-        console.error("Error loading tenant:", error);
-      }
-    };
-    if (tenantId) loadTenant();
-  }, [tenantId]);
-
-  const pickImage = async () => {
-    let result = await ImagePicker.launchImageLibraryAsync({
-      mediaTypes: ImagePicker.MediaTypeOptions.Images,
-      allowsEditing: true,
-      aspect: [4, 3],
-      quality: 1,
-    });
-
-    if (!result.canceled) {
-      setImage(result.assets[0].uri);
-    }
-  };
-
-  const onSubmit = async (data: TenantFormData) => {
-    try {
-      setLoading(true);
-
-      await updateTenantInMock(tenantId!, {
-        ...data,
-        imageUrl: image || undefined,
-      });
-
-      setSnackbarMessage("Tenant updated successfully!");
-      setSnackbarVisible(true);
-
-      setTimeout(() => {
-        router.replace("/(tabs)/properties");
-      }, 1000);
-
-    } catch (error) {
-      console.error("Failed to update tenant:", error);
-      Alert.alert("Error", "Failed to update tenant. Please try again.");
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  return (
-    <ScrollView contentContainerStyle={styles.scrollContainer}>
-      <View style={styles.container}>
-        <View style={styles.header}>
-          <TouchableOpacity onPress={() => router.back()} style={{ marginRight: 10 }}>
-            <Ionicons name="arrow-back" size={24} color="white" />
-          </TouchableOpacity>
-          <Text style={styles.headerText}>Edit Tenant</Text>
-          <View style={{ width: 24 }} />
-        </View>
-
-        <Controller
-          control={control}
-          name="name"
-          rules={{ required: "Name is required" }}
-          render={({ field: { onChange, value } }) => (
-            <TextInput 
-              label="Name" 
-              value={value} 
-              onChangeText={onChange} 
-              style={styles.input}
-              error={!!errors.name}
-            />
-          )}
-        />
-        {errors.name?.message && <Text style={styles.errorText}>{errors.name.message}</Text>}
-
-        <Controller
-          control={control}
-          name="email"
-          rules={{ 
-            required: "Email is required",
-            pattern: {
-              value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
-              message: "Invalid email address"
-            }
-          }}
-          render={({ field: { onChange, value } }) => (
-            <TextInput 
-              label="Email" 
-              value={value} 
-              onChangeText={onChange} 
-              style={styles.input}
-              error={!!errors.email}
-            />
-          )}
-        />
-        {errors.email?.message && <Text style={styles.errorText}>{errors.email.message}</Text>}
-
-        <Controller
-          control={control}
-          name="phone"
-          rules={{ required: "Phone number is required" }}
-          render={({ field: { onChange, value } }) => (
-            <TextInput 
-              label="Phone" 
-              value={value} 
-              onChangeText={onChange} 
-              style={styles.input} 
-              keyboardType="phone-pad"
-              error={!!errors.phone}
-            />
-          )}
-        />
-        {errors.phone?.message && <Text style={styles.errorText}>{errors.phone.message}</Text>}
-
-        <Controller
-          control={control}
-          name="state"
-          render={({ field: { onChange, value } }) => (
-            <TextInput label="State" value={value} onChangeText={onChange} style={styles.input} />
-          )}
-        />
-
-        <Controller
-          control={control}
-          name="city"
-          render={({ field: { onChange, value } }) => (
-            <TextInput label="City" value={value} onChangeText={onChange} style={styles.input} />
-          )}
-        />
-
-        <TouchableOpacity onPress={pickImage} style={styles.imagePicker}>
-          {image ? <Image source={{ uri: image }} style={styles.image} /> : <Text>+ Upload Image</Text>}
-        </TouchableOpacity>
-
-        <Button 
-          mode="contained" 
-          onPress={handleSubmit(onSubmit)} 
-          style={styles.button}
-          disabled={loading}
-        >
-          {loading ? (
-            <ActivityIndicator animating={true} color="white" />
-          ) : (
-            "Update"
-          )}
-        </Button>
-
-        <Snackbar
-          visible={snackbarVisible}
-          onDismiss={() => setSnackbarVisible(false)}
-          duration={3000}
-          style={styles.snackbar}
-          action={{
-            label: 'OK',
-            onPress: () => setSnackbarVisible(false),
-          }}
-        >
-          {snackbarMessage}
-        </Snackbar>
-      </View>
-    </ScrollView>
-  );
-};
-
-export default EditTenant;
-
-const styles = StyleSheet.create({
-  scrollContainer: {
-    paddingBottom: 20,
-  },
-  container: {
-    padding: 20,
-    backgroundColor: "#fff",
-    flex: 1,
-  },
-  header: {
-    flexDirection: 'row',
-    alignItems: 'center',
-    backgroundColor: '#009688',
-    paddingVertical: 10,
-    paddingHorizontal: 15,
-    borderRadius: 5,
-    marginBottom: 20,
-    justifyContent: 'space-between',
-  },
-  headerText: {
-    color: 'white',
-    fontSize: 18,
-    fontWeight: 'bold',
-  },
-  input: {
-    marginBottom: 5,
-    backgroundColor: "#dff8eb",
-  },
-  errorText: {
-    color: 'red',
-    fontSize: 12,
-    marginBottom: 10,
-    marginLeft: 5,
-  },
-  imagePicker: {
-    borderWidth: 1,
-    borderColor: "#dff8eb",
-    borderRadius: 5,
-    padding: 20,
-    alignItems: "center",
-    justifyContent: "center",
-    marginBottom: 20,
-  },
-  image: {
-    width: 100,
-    height: 100,
-    borderRadius: 5,
-  },
-  button: {
-    marginTop: 10,
-    backgroundColor: '#009688',
-  },
-  snackbar: {
-    backgroundColor: '#4CAF50',
-    position: 'absolute',
-    bottom: 10,
-    left: 20,
-    right: 20,
-  },
-});
diff --git a/app/(tabs)/editUnit.tsx b/app/(tabs)/editUnit.tsx
deleted file mode 100644
index 231f442..0000000
--- a/app/(tabs)/editUnit.tsx
+++ /dev/null
@@ -1,172 +0,0 @@
-import React, { useEffect, useState } from "react";
-import { View, ScrollView, StyleSheet, TouchableOpacity, Alert } from "react-native";
-import { TextInput, Button, Text, ActivityIndicator, Snackbar } from "react-native-paper";
-import { useForm, Controller } from "react-hook-form";
-import { useRouter, useLocalSearchParams } from 'expo-router';
-import { Ionicons } from '@expo/vector-icons';
-import { getUnitById, updateUnitOfProperty } from "../../lib/mockData";
-
-interface UnitFormData {
-    size: string;
-    bedrooms: string;
-    bathrooms: string;
-    rentAmount: string;
-    floorNumber?: string;
-    notes?: string;
-}
-
-const EditUnit = () => {
-    const router = useRouter();
-    const { propertyId, unitId } = useLocalSearchParams<{ propertyId: string, unitId: string }>();
-
-    const { control, handleSubmit, reset, setValue, formState: { errors } } = useForm<UnitFormData>();
-    const [loading, setLoading] = useState(false);
-    const [snackbarVisible, setSnackbarVisible] = useState(false);
-    const [snackbarMessage, setSnackbarMessage] = useState("");
-
-    useEffect(() => {
-        const loadUnit = async () => {
-            try {
-                const unit = await getUnitById(propertyId!, unitId!);
-                if (unit) {
-                    setValue("size", unit.size.toString());
-                    setValue("bedrooms", unit.bedrooms.toString());
-                    setValue("bathrooms", unit.bathrooms.toString());
-                    setValue("rentAmount", unit.rentAmount.toString());
-                    setValue("floorNumber", unit.floorNumber?.toString() || "");
-                    setValue("notes", unit.notes || "");
-                }
-            } catch (error) {
-                console.error("Error loading unit:", error);
-            }
-        };
-        if (propertyId && unitId) loadUnit();
-    }, [propertyId, unitId]);
-
-    const onSubmit = async (data: UnitFormData) => {
-        try {
-            setLoading(true);
-            await updateUnitOfProperty(propertyId!, unitId!, {
-                size: parseFloat(data.size),
-                bedrooms: parseInt(data.bedrooms),
-                bathrooms: parseInt(data.bathrooms),
-                rentAmount: parseFloat(data.rentAmount),
-                floorNumber: data.floorNumber ? parseInt(data.floorNumber) : undefined,
-                notes: data.notes || undefined,
-            });
-
-            setSnackbarMessage("Unit updated successfully!");
-            setSnackbarVisible(true);
-
-            setTimeout(() => {
-                router.replace("/(tabs)/properties");
-            }, 1000);
-
-        } catch (error) {
-            console.error("Failed to update unit:", error);
-            Alert.alert("Error", "Failed to update unit. Please try again.");
-        } finally {
-            setLoading(false);
-        }
-    };
-
-    return (
-        <ScrollView contentContainerStyle={styles.scrollContainer}>
-            <View style={styles.container}>
-                <View style={styles.header}>
-                    <TouchableOpacity onPress={() => router.back()} style={{ marginRight: 10 }}>
-                        <Ionicons name="arrow-back" size={24} color="white" />
-                    </TouchableOpacity>
-                    <Text style={styles.headerText}>Edit Unit</Text>
-                    <View style={{ width: 24 }} />
-                </View>
-
-                <Controller
-                    control={control}
-                    name="size"
-                    rules={{ required: "Size is required" }}
-                    render={({ field: { onChange, value } }) => (
-                        <TextInput label="Size (m²)" value={value} onChangeText={onChange} style={styles.input} error={!!errors.size} keyboardType="numeric" />
-                    )}
-                />
-                {errors.size && <Text style={styles.errorText}>{errors.size.message}</Text>}
-
-                <Controller
-                    control={control}
-                    name="bedrooms"
-                    rules={{ required: "Bedrooms are required" }}
-                    render={({ field: { onChange, value } }) => (
-                        <TextInput label="Bedrooms" value={value} onChangeText={onChange} style={styles.input} error={!!errors.bedrooms} keyboardType="numeric" />
-                    )}
-                />
-                {errors.bedrooms && <Text style={styles.errorText}>{errors.bedrooms.message}</Text>}
-
-                <Controller
-                    control={control}
-                    name="bathrooms"
-                    rules={{ required: "Bathrooms are required" }}
-                    render={({ field: { onChange, value } }) => (
-                        <TextInput label="Bathrooms" value={value} onChangeText={onChange} style={styles.input} error={!!errors.bathrooms} keyboardType="numeric" />
-                    )}
-                />
-                {errors.bathrooms && <Text style={styles.errorText}>{errors.bathrooms.message}</Text>}
-
-                <Controller
-                    control={control}
-                    name="rentAmount"
-                    rules={{ required: "Rent Amount is required" }}
-                    render={({ field: { onChange, value } }) => (
-                        <TextInput label="Rent Amount (SAR)" value={value} onChangeText={onChange} style={styles.input} error={!!errors.rentAmount} keyboardType="numeric" />
-                    )}
-                />
-                {errors.rentAmount && <Text style={styles.errorText}>{errors.rentAmount.message}</Text>}
-
-                <Controller
-                    control={control}
-                    name="floorNumber"
-                    render={({ field: { onChange, value } }) => (
-                        <TextInput label="Floor Number" value={value} onChangeText={onChange} style={styles.input} keyboardType="numeric" />
-                    )}
-                />
-
-                <Controller
-                    control={control}
-                    name="notes"
-                    render={({ field: { onChange, value } }) => (
-                        <TextInput label="Notes" value={value} onChangeText={onChange} style={styles.input} multiline numberOfLines={3} />
-                    )}
-                />
-
-                <Button mode="contained" onPress={handleSubmit(onSubmit)} style={styles.button} disabled={loading}>
-                    {loading ? <ActivityIndicator animating={true} color="white" /> : "Update"}
-                </Button>
-
-                <Snackbar
-                    visible={snackbarVisible}
-                    onDismiss={() => setSnackbarVisible(false)}
-                    duration={3000}
-                    style={styles.snackbar}
-                    action={{ label: 'OK', onPress: () => setSnackbarVisible(false) }}
-                >
-                    {snackbarMessage}
-                </Snackbar>
-            </View>
-        </ScrollView>
-    );
-};
-
-export default EditUnit;
-
-const styles = StyleSheet.create({
-    scrollContainer: { paddingBottom: 20 },
-    container: { padding: 20, backgroundColor: "#fff", flex: 1 },
-    header: {
-        flexDirection: 'row', alignItems: 'center', backgroundColor: '#009688',
-        paddingVertical: 10, paddingHorizontal: 15, borderRadius: 5, marginBottom: 20, justifyContent: 'space-between'
-    },
-    headerText: { color: 'white', fontSize: 18, fontWeight: 'bold' },
-    input: { marginBottom: 5, backgroundColor: "#dff8eb" },
-    errorText: { color: 'red', fontSize: 12, marginBottom: 10, marginLeft: 5 },
-    button: { marginTop: 10, backgroundColor: '#009688' },
-    snackbar: { backgroundColor: '#4CAF50', position: 'absolute', bottom: 10, left: 20, right: 20 },
-});
diff --git a/app/(tabs)/expenses.tsx b/app/(tabs)/expenses.tsx
deleted file mode 100644
index 8b97ed3..0000000
--- a/app/(tabs)/expenses.tsx
+++ /dev/null
@@ -1,136 +0,0 @@
-// app/(tabs)/expenses.tsx
-
-import React, { useEffect, useState } from "react";
-import { View, Text, ScrollView, StyleSheet, TouchableOpacity, ActivityIndicator } from "react-native";
-import { Ionicons } from "@expo/vector-icons";
-import { useRouter } from "expo-router";
-// تحتاج دالة تجيب المصاريف من الموك داتا (بنضبطها لاحقاً)
-import { getAllExpenses } from "../../lib/mockData"; 
-import type { Expense } from "../../lib/mockData";
-
-const Expenses = () => {
-  const router = useRouter();
-  const [expenses, setExpenses] = useState<Expense[]>([]);
-  const [loading, setLoading] = useState(true);
-
-  useEffect(() => {
-    const fetchExpenses = async () => {
-      try {
-        const data = await getAllExpenses();
-        setExpenses(data);
-      } catch (error) {
-        console.error("Failed to load expenses:", error);
-      } finally {
-        setLoading(false);
-      }
-    };
-    fetchExpenses();
-  }, []);
-
-  const handleAddExpense = () => {
-    router.push("/(tabs)/addExpense");
-  };
-
-  return (
-    <View style={styles.container}>
-      {/* Header */}
-      <View style={styles.header}>
-        <Text style={styles.headerTitle}>Expenses</Text>
-        <TouchableOpacity onPress={handleAddExpense}>
-          <Ionicons name="add-circle-outline" size={28} color="white" />
-        </TouchableOpacity>
-      </View>
-
-      {loading ? (
-        <View style={styles.loadingContainer}>
-          <ActivityIndicator size="large" color="#17b8a6" />
-        </View>
-      ) : (
-        <ScrollView contentContainerStyle={styles.listContainer}>
-          {expenses.length === 0 ? (
-            <Text style={styles.noDataText}>No expenses recorded yet.</Text>
-          ) : (
-            expenses.map((expense) => (
-              <View key={expense.id} style={styles.expenseCard}>
-                <Text style={styles.expenseType}>{expense.expenseType}</Text>
-                <Text style={styles.amount}>{expense.amount.toLocaleString()} SAR</Text>
-                <Text style={styles.details}>
-                  Property ID: {expense.propertyId} {expense.unitId ? `| Unit: ${expense.unitId}` : ""}
-                </Text>
-                <Text style={styles.details}>
-                  Date: {expense.expenseDate}
-                </Text>
-                {expense.notes && (
-                  <Text style={styles.details}>
-                    Notes: {expense.notes}
-                  </Text>
-                )}
-              </View>
-            ))
-          )}
-        </ScrollView>
-      )}
-    </View>
-  );
-};
-
-export default Expenses;
-
-const styles = StyleSheet.create({
-  container: {
-    flex: 1,
-    backgroundColor: "#F5F7FA",
-  },
-  header: {
-    flexDirection: "row",
-    justifyContent: "space-between",
-    alignItems: "center",
-    backgroundColor: "#17b8a6",
-    padding: 15,
-    marginBottom: 10,
-  },
-  headerTitle: {
-    fontSize: 18,
-    fontWeight: "bold",
-    color: "white",
-  },
-  loadingContainer: {
-    flex: 1,
-    justifyContent: "center",
-    alignItems: "center",
-  },
-  listContainer: {
-    padding: 15,
-  },
-  noDataText: {
-    textAlign: "center",
-    marginTop: 30,
-    color: "#666",
-  },
-  expenseCard: {
-    backgroundColor: "#fff",
-    padding: 15,
-    borderRadius: 8,
-    marginBottom: 10,
-    shadowColor: "#000",
-    shadowOffset: { width: 0, height: 1 },
-    shadowOpacity: 0.1,
-    shadowRadius: 2,
-    elevation: 2,
-  },
-  expenseType: {
-    fontSize: 16,
-    fontWeight: "bold",
-    marginBottom: 5,
-  },
-  amount: {
-    fontSize: 15,
-    color: "#17b8a6",
-    marginBottom: 5,
-  },
-  details: {
-    fontSize: 13,
-    color: "#666",
-    marginBottom: 3,
-  },
-});
diff --git a/app/(tabs)/navbar.tsx b/app/(tabs)/navbar.tsx
index 31ea650..34c5e33 100644
--- a/app/(tabs)/navbar.tsx
+++ b/app/(tabs)/navbar.tsx
@@ -37,27 +37,27 @@ const Navbar: React.FC<NavbarProps> = ({ closeNav }) => {
         <Text style={styles.navText}>Dashboard</Text>
       </TouchableOpacity>
 
-      <TouchableOpacity onPress={() => router.push("/(tabs)/properties")} style={styles.navItem}>
+      <TouchableOpacity onPress={() => router.push("/(tabs)/properties/properties")} style={styles.navItem}>
         <Ionicons name="home" size={20} color="teal" />
         <Text style={styles.navText}>Properties</Text>
       </TouchableOpacity>
 
-      <TouchableOpacity onPress={() => router.push("/(tabs)/payments")} style={styles.navItem}>
+      <TouchableOpacity onPress={() => router.push("/(tabs)/payments/payments")} style={styles.navItem}>
         <Ionicons name="cash" size={20} color="teal" />
         <Text style={styles.navText}>Payments</Text>
       </TouchableOpacity>
 
-      <TouchableOpacity onPress={() => router.push("/(tabs)/expenses")} style={styles.navItem}>
+      <TouchableOpacity onPress={() => router.push("/(tabs)/expenses/expenses")} style={styles.navItem}>
         <Ionicons name="receipt" size={20} color="teal" />
         <Text style={styles.navText}>Expenses</Text>
       </TouchableOpacity>
 
-      <TouchableOpacity onPress={() => router.push("/(tabs)/tenants")} style={styles.navItem}>
+      <TouchableOpacity onPress={() => router.push("/(tabs)/tenants/tenants")} style={styles.navItem}>
         <Ionicons name="people" size={20} color="teal" />
         <Text style={styles.navText}>Tenants</Text>
       </TouchableOpacity>
 
-      <TouchableOpacity onPress={() => router.push("/(tabs)/paymentReport")} style={styles.navItem}>
+      <TouchableOpacity onPress={() => router.push("/(tabs)/payments/paymentReport")} style={styles.navItem}>
         <Ionicons name="analytics" size={20} color="teal" />
         <Text style={styles.navText}>Payment Report</Text>
       </TouchableOpacity>
diff --git a/app/(tabs)/paymentReport.tsx b/app/(tabs)/paymentReport.tsx
deleted file mode 100644
index 58da010..0000000
--- a/app/(tabs)/paymentReport.tsx
+++ /dev/null
@@ -1,106 +0,0 @@
-import React from "react";
-import { View, ScrollView, StyleSheet, TouchableOpacity } from "react-native";
-import { Text, Card } from "react-native-paper";
-import { useRouter } from "expo-router";
-import { Ionicons } from "@expo/vector-icons";
-
-const payments = [
-  { id: 1, tenant: "Tenant 1", amount: "$5000", date: "2025/02/10" },
-  { id: 2, tenant: "Tenant 2", amount: "$5000", date: "2025/02/10" },
-  { id: 3, tenant: "Tenant 3", amount: "$5000", date: "2025/02/10" },
-  { id: 4, tenant: "Tenant 4", amount: "$5000", date: "2025/02/10" },
-  { id: 5, tenant: "Tenant 5", amount: "$5000", date: "2025/02/10" },
-];
-
-const PaymentReport = () => {
-  const router = useRouter();
-
-  return (
-    <View style={styles.container}>
-      {/* Header */}
-      <View style={styles.header}>
-        <TouchableOpacity onPress={() => router.replace("/(tabs)/dashboard")}>
-          <Ionicons name="arrow-back" size={24} color="white" />
-        </TouchableOpacity>
-        <Text style={styles.headerText}>Payment report</Text>
-      </View>
-      
-      {/* Payment List */}
-      <ScrollView contentContainerStyle={styles.scrollContainer}>
-        {payments.map((payment) => (
-          <Card key={payment.id} style={styles.card}>
-            <Card.Content>
-              <Text style={styles.tenantName}>{payment.tenant}</Text>
-              <Text style={styles.details}>📎 1 Attachment</Text>
-              <Text style={styles.details}>🏛 debit</Text>
-              <View style={styles.footer}>
-                <Text style={styles.amount}>+{payment.amount}</Text>
-                <Text style={styles.date}>{payment.date}</Text>
-              </View>
-            </Card.Content>
-          </Card>
-        ))}
-      </ScrollView>
-    </View>
-  );
-};
-
-export default PaymentReport;
-
-const styles = StyleSheet.create({
-  container: {
-    flex: 1,
-    backgroundColor: "#E3F3EE",
-  },
-  header: {
-    flexDirection: "row",
-    alignItems: "center",
-    backgroundColor: "#009688",
-    paddingVertical: 15,
-    paddingHorizontal: 20,
-  },
-  headerText: {
-    color: "white",
-    fontSize: 18,
-    fontWeight: "bold",
-    marginLeft: 10,
-  },
-  scrollContainer: {
-    padding: 20,
-  },
-  card: {
-    backgroundColor: "#fff",
-    borderRadius: 10,
-    marginBottom: 15,
-    padding: 10,
-    shadowColor: "#000",
-    shadowOpacity: 0.1,
-    shadowRadius: 5,
-    elevation: 2,
-  },
-  tenantName: {
-    fontSize: 16,
-    fontWeight: "bold",
-  },
-  details: {
-    fontSize: 14,
-    color: "#666",
-    marginTop: 2,
-  },
-  footer: {
-    flexDirection: "row",
-    justifyContent: "space-between",
-    marginTop: 10,
-  },
-  amount: {
-    fontSize: 16,
-    fontWeight: "bold",
-    color: "green",
-  },
-  date: {
-    fontSize: 14,
-    color: "#666",
-  },
-});
-
-
diff --git a/app/(tabs)/payments.tsx b/app/(tabs)/payments.tsx
deleted file mode 100644
index 5c09e9c..0000000
--- a/app/(tabs)/payments.tsx
+++ /dev/null
@@ -1,125 +0,0 @@
-// app/(tabs)/payments.tsx
-
-import React, { useEffect, useState } from "react";
-import { View, Text, ScrollView, StyleSheet, TouchableOpacity, ActivityIndicator } from "react-native";
-import { Ionicons } from "@expo/vector-icons";
-import { useRouter } from "expo-router";
-import { getAllPayments } from "../../lib/mockData";
-import type { Payment } from "../../lib/mockData";
-
-const Payments = () => {
-  const router = useRouter();
-  const [payments, setPayments] = useState<Payment[]>([]);
-  const [loading, setLoading] = useState(true);
-
-  useEffect(() => {
-    const fetchPayments = async () => {
-      try {
-        const data = await getAllPayments();
-        setPayments(data);
-      } catch (error) {
-        console.error("Failed to load payments:", error);
-      } finally {
-        setLoading(false);
-      }
-    };
-    fetchPayments();
-  }, []);
-
-  const handleAddPayment = () => {
-    router.push("/(tabs)/addPayment");
-  };
-
-  return (
-    <View style={styles.container}>
-      <View style={styles.header}>
-        <Text style={styles.headerTitle}>Payments</Text>
-        <TouchableOpacity onPress={handleAddPayment}>
-          <Ionicons name="add-circle-outline" size={28} color="white" />
-        </TouchableOpacity>
-      </View>
-
-      {loading ? (
-        <View style={styles.loadingContainer}>
-          <ActivityIndicator size="large" color="#17b8a6" />
-        </View>
-      ) : (
-        <ScrollView contentContainerStyle={styles.listContainer}>
-          {payments.length === 0 ? (
-            <Text style={styles.noDataText}>No payments recorded yet.</Text>
-          ) : (
-            payments.map((payment) => (
-              <View key={payment.id} style={styles.paymentCard}>
-                <Text style={styles.amount}>{payment.amount.toLocaleString()} SAR</Text>
-                <Text style={styles.details}>
-                  Property ID: {payment.propertyId} {payment.unitId ? `| Unit: ${payment.unitId}` : ""}
-                </Text>
-                <Text style={styles.details}>Date: {payment.paymentDate}</Text>
-                {payment.notes && (
-                  <Text style={styles.details}>Notes: {payment.notes}</Text>
-                )}
-              </View>
-            ))
-          )}
-        </ScrollView>
-      )}
-    </View>
-  );
-};
-
-export default Payments;
-
-const styles = StyleSheet.create({
-  container: {
-    flex: 1,
-    backgroundColor: "#F5F7FA",
-  },
-  header: {
-    flexDirection: "row",
-    justifyContent: "space-between",
-    alignItems: "center",
-    backgroundColor: "#17b8a6",
-    padding: 15,
-    marginBottom: 10,
-  },
-  headerTitle: {
-    fontSize: 18,
-    fontWeight: "bold",
-    color: "white",
-  },
-  loadingContainer: {
-    flex: 1,
-    justifyContent: "center",
-    alignItems: "center",
-  },
-  listContainer: {
-    padding: 15,
-  },
-  noDataText: {
-    textAlign: "center",
-    marginTop: 30,
-    color: "#666",
-  },
-  paymentCard: {
-    backgroundColor: "#fff",
-    padding: 15,
-    borderRadius: 8,
-    marginBottom: 10,
-    shadowColor: "#000",
-    shadowOffset: { width: 0, height: 1 },
-    shadowOpacity: 0.1,
-    shadowRadius: 2,
-    elevation: 2,
-  },
-  amount: {
-    fontSize: 16,
-    fontWeight: "bold",
-    color: "#17b8a6",
-    marginBottom: 5,
-  },
-  details: {
-    fontSize: 13,
-    color: "#666",
-    marginBottom: 3,
-  },
-});
diff --git a/app/(tabs)/properties.tsx b/app/(tabs)/properties.tsx
deleted file mode 100644
index 1c7671d..0000000
--- a/app/(tabs)/properties.tsx
+++ /dev/null
@@ -1,165 +0,0 @@
-import React, { useEffect, useState } from "react";
-import { View, Text, ScrollView, StyleSheet, TouchableOpacity, ActivityIndicator, Alert } from "react-native";
-import { Ionicons } from "@expo/vector-icons";
-import { useRouter } from "expo-router";
-import { getAllProperties, deletePropertyFromMock } from "../../lib/mockData";
-import type { Property } from "../../lib/mockData";
-
-const Properties = () => {
-  const router = useRouter();
-  const [properties, setProperties] = useState<Property[]>([]);
-  const [loading, setLoading] = useState(true);
-
-  useEffect(() => {
-    fetchProperties();
-  }, []);
-
-  const fetchProperties = async () => {
-    try {
-      setLoading(true);
-      const data = await getAllProperties();
-      setProperties(data);
-    } catch (error) {
-      console.error("Failed to load properties:", error);
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  const handleAddProperty = () => {
-    router.push("/(tabs)/addProperty");
-  };
-
-  const handleViewProperty = (propertyId: string) => {
-    router.push({ pathname: "/(tabs)/property-details", params: { propertyId } });
-  };
-
-  const handleEditProperty = (propertyId: string) => {
-    router.push({ pathname: "/(tabs)/editProperty", params: { propertyId } });
-  };
-
-  const handleDeleteProperty = async (propertyId: string) => {
-    Alert.alert(
-      "Delete Property",
-      "Are you sure you want to delete this property?",
-      [
-        { text: "Cancel", style: "cancel" },
-        {
-          text: "Delete",
-          style: "destructive",
-          onPress: async () => {
-            await deletePropertyFromMock(propertyId);
-            fetchProperties();
-          },
-        },
-      ],
-      { cancelable: true }
-    );
-  };
-
-  return (
-    <View style={styles.container}>
-      {/* Header */}
-      <View style={styles.header}>
-        <Text style={styles.headerTitle}>Properties</Text>
-        <TouchableOpacity onPress={handleAddProperty}>
-          <Ionicons name="add-circle-outline" size={28} color="white" />
-        </TouchableOpacity>
-      </View>
-
-      {loading ? (
-        <View style={styles.loadingContainer}>
-          <ActivityIndicator size="large" color="#17b8a6" />
-        </View>
-      ) : (
-        <ScrollView contentContainerStyle={styles.listContainer}>
-          {properties.length === 0 ? (
-            <Text style={styles.noDataText}>No properties found.</Text>
-          ) : (
-            properties.map((property) => (
-              <View key={property.id} style={styles.propertyCard}>
-                <Text style={styles.propertyName}>{property.name}</Text>
-                <Text style={styles.propertyType}>{property.type}</Text>
-
-                <View style={styles.buttonRow}>
-                  <TouchableOpacity onPress={() => handleViewProperty(property.id)} style={styles.button}>
-                    <Ionicons name="eye-outline" size={20} color="#17b8a6" />
-                  </TouchableOpacity>
-                  <TouchableOpacity onPress={() => handleEditProperty(property.id)} style={styles.button}>
-                    <Ionicons name="create-outline" size={20} color="#FFA500" />
-                  </TouchableOpacity>
-                  <TouchableOpacity onPress={() => handleDeleteProperty(property.id)} style={styles.button}>
-                    <Ionicons name="trash-outline" size={20} color="#FF3B30" />
-                  </TouchableOpacity>
-                </View>
-              </View>
-            ))
-          )}
-        </ScrollView>
-      )}
-    </View>
-  );
-};
-
-export default Properties;
-
-const styles = StyleSheet.create({
-  container: {
-    flex: 1,
-    backgroundColor: "#F5F7FA",
-  },
-  header: {
-    flexDirection: "row",
-    justifyContent: "space-between",
-    alignItems: "center",
-    backgroundColor: "#17b8a6",
-    padding: 15,
-    marginBottom: 10,
-  },
-  headerTitle: {
-    fontSize: 18,
-    fontWeight: "bold",
-    color: "white",
-  },
-  loadingContainer: {
-    flex: 1,
-    justifyContent: "center",
-    alignItems: "center",
-  },
-  listContainer: {
-    padding: 15,
-  },
-  noDataText: {
-    textAlign: "center",
-    marginTop: 30,
-    color: "#666",
-  },
-  propertyCard: {
-    backgroundColor: "#fff",
-    padding: 15,
-    borderRadius: 8,
-    marginBottom: 10,
-    shadowColor: "#000",
-    shadowOffset: { width: 0, height: 1 },
-    shadowOpacity: 0.1,
-    shadowRadius: 2,
-    elevation: 2,
-  },
-  propertyName: {
-    fontSize: 16,
-    fontWeight: "bold",
-    marginBottom: 5,
-  },
-  propertyType: {
-    fontSize: 14,
-    color: "#666",
-  },
-  buttonRow: {
-    flexDirection: "row",
-    marginTop: 10,
-    justifyContent: "flex-end",
-  },
-  button: {
-    marginLeft: 10,
-  },
-});
diff --git a/app/(tabs)/property-details.tsx b/app/(tabs)/property-details.tsx
deleted file mode 100644
index 1cb99dc..0000000
--- a/app/(tabs)/property-details.tsx
+++ /dev/null
@@ -1,230 +0,0 @@
-import React, { useEffect, useState } from 'react';
-import { View, Text, StyleSheet, TouchableOpacity, ActivityIndicator, ScrollView, Alert } from 'react-native';
-import { useLocalSearchParams, useRouter } from 'expo-router';
-import { Ionicons } from '@expo/vector-icons';
-import { getPropertyById, getUnitsOfProperty, deletePropertyFromMock } from '../../lib/mockData';
-import type { Property, Unit } from '../../lib/mockData';
-
-const PropertyDetails = () => {
-  const router = useRouter();
-  const params = useLocalSearchParams();
-  const propertyId = params.propertyId as string;
-  const [property, setProperty] = useState<Property | null>(null);
-  const [units, setUnits] = useState<Unit[]>([]);
-  const [loading, setLoading] = useState(true);
-
-  useEffect(() => {
-    fetchData();
-  }, [propertyId]);
-
-  const fetchData = async () => {
-    try {
-      setLoading(true);
-      const prop = await getPropertyById(propertyId);
-      setProperty(prop || null);
-
-      if (prop?.type === 'building') {
-        const unitList = await getUnitsOfProperty(propertyId);
-        setUnits(unitList);
-      }
-    } catch (error) {
-      console.error('Failed to load property:', error);
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  const handleDeleteProperty = () => {
-    Alert.alert(
-      "Delete Property",
-      "Are you sure you want to delete this property?",
-      [
-        { text: "Cancel", style: "cancel" },
-        {
-          text: "Delete",
-          style: "destructive",
-          onPress: async () => {
-            await deletePropertyFromMock(propertyId);
-            router.replace("/(tabs)/properties");
-          },
-        },
-      ]
-    );
-  };
-
-  const handleEditProperty = () => {
-    router.push({ pathname: '/(tabs)/editProperty', params: { propertyId } });
-  };
-
-  const handleAddUnit = () => {
-    router.push({ pathname: '/(tabs)/addUnit', params: { propertyId } });
-  };
-
-  const handleViewUnit = (unitId: string) => {
-    router.push({ pathname: '/(tabs)/unit-details', params: { propertyId, unitId } });
-  };
-
-  if (loading) {
-    return (
-      <View style={styles.loadingContainer}>
-        <ActivityIndicator size="large" color="#17b8a6" />
-      </View>
-    );
-  }
-
-  if (!property) {
-    return (
-      <View style={styles.container}>
-        <Text>Property not found</Text>
-      </View>
-    );
-  }
-
-  return (
-    <ScrollView style={styles.container}>
-      {/* Header */}
-      <View style={styles.header}>
-        <TouchableOpacity onPress={() => router.back()}>
-          <Ionicons name="arrow-back" size={24} color="white" />
-        </TouchableOpacity>
-        <Text style={styles.headerTitle}>{property.name}</Text>
-        <View style={styles.headerIcons}>
-          <TouchableOpacity onPress={handleEditProperty} style={styles.iconButton}>
-            <Ionicons name="create-outline" size={22} color="white" />
-          </TouchableOpacity>
-          <TouchableOpacity onPress={handleDeleteProperty} style={styles.iconButton}>
-            <Ionicons name="trash-outline" size={22} color="white" />
-          </TouchableOpacity>
-        </View>
-      </View>
-
-      {/* Property Info */}
-      <View style={styles.details}>
-        <Text style={styles.sectionTitle}>Property Information</Text>
-        <Text style={styles.detailText}>Type: {property.type}</Text>
-        <Text style={styles.detailText}>Address: {property.address || '-'}</Text>
-        <Text style={styles.detailText}>State: {property.state || '-'}</Text>
-        <Text style={styles.detailText}>City: {property.city || '-'}</Text>
-      </View>
-
-      {/* Units List */}
-      {property.type === 'building' && (
-        <>
-          <View style={styles.unitsHeader}>
-            <Text style={styles.sectionTitle}>Units</Text>
-            <TouchableOpacity onPress={handleAddUnit} style={styles.addUnitButton}>
-              <Text style={styles.addUnitButtonText}>+ Add Unit</Text>
-            </TouchableOpacity>
-          </View>
-
-          {units.length === 0 ? (
-            <Text style={styles.noDataText}>No units added yet.</Text>
-          ) : (
-            units.map((unit) => (
-              <TouchableOpacity
-                key={unit.id}
-                style={styles.unitCard}
-                onPress={() => handleViewUnit(unit.id)}
-              >
-                <Text style={styles.unitName}>Unit {unit.id}</Text>
-                <Text style={styles.unitInfo}>Size: {unit.size} m²</Text>
-                <Text style={styles.unitInfo}>Bedrooms: {unit.bedrooms}</Text>
-                <Text style={styles.unitInfo}>Rent: {unit.rentAmount} SAR</Text>
-                <Text style={styles.unitInfo}>Status: {unit.status}</Text>
-              </TouchableOpacity>
-            ))
-          )}
-        </>
-      )}
-    </ScrollView>
-  );
-};
-
-export default PropertyDetails;
-
-const styles = StyleSheet.create({
-  container: {
-    flex: 1,
-    backgroundColor: '#F5F7FA',
-  },
-  header: {
-    flexDirection: 'row',
-    alignItems: 'center',
-    backgroundColor: '#17b8a6',
-    padding: 15,
-    justifyContent: 'space-between',
-  },
-  headerTitle: {
-    color: 'white',
-    fontSize: 18,
-    fontWeight: 'bold',
-  },
-  headerIcons: {
-    flexDirection: 'row',
-  },
-  iconButton: {
-    marginLeft: 10,
-  },
-  details: {
-    padding: 20,
-  },
-  sectionTitle: {
-    fontSize: 18,
-    fontWeight: 'bold',
-    marginBottom: 10,
-    color: '#333',
-  },
-  detailText: {
-    fontSize: 16,
-    marginBottom: 5,
-    color: '#555',
-  },
-  unitsHeader: {
-    flexDirection: 'row',
-    justifyContent: 'space-between',
-    alignItems: 'center',
-    marginHorizontal: 20,
-    marginTop: 20,
-  },
-  addUnitButton: {
-    backgroundColor: '#17b8a6',
-    paddingVertical: 5,
-    paddingHorizontal: 10,
-    borderRadius: 5,
-  },
-  addUnitButtonText: {
-    color: 'white',
-    fontWeight: 'bold',
-  },
-  noDataText: {
-    textAlign: 'center',
-    marginTop: 20,
-    color: '#777',
-  },
-  unitCard: {
-    backgroundColor: '#fff',
-    marginHorizontal: 20,
-    marginTop: 10,
-    padding: 15,
-    borderRadius: 8,
-    shadowColor: '#000',
-    shadowOffset: { width: 0, height: 1 },
-    shadowOpacity: 0.1,
-    shadowRadius: 2,
-    elevation: 2,
-  },
-  unitName: {
-    fontSize: 16,
-    fontWeight: 'bold',
-    marginBottom: 5,
-  },
-  unitInfo: {
-    fontSize: 14,
-    color: '#666',
-  },
-  loadingContainer: {
-    flex: 1,
-    justifyContent: 'center',
-    alignItems: 'center',
-  },
-});
diff --git a/app/(tabs)/tenant-details.tsx b/app/(tabs)/tenant-details.tsx
deleted file mode 100644
index 4b3ea38..0000000
--- a/app/(tabs)/tenant-details.tsx
+++ /dev/null
@@ -1,166 +0,0 @@
-// app/(tabs)/tenant-details.tsx
-
-import React, { useEffect, useState } from "react";
-import { View, Text, StyleSheet, TouchableOpacity, Alert, ScrollView, ActivityIndicator, Image } from "react-native";
-import { useRouter, useLocalSearchParams } from "expo-router";
-import { Ionicons } from "@expo/vector-icons";
-import { getTenantById, deleteTenantFromMock } from "../../lib/mockData";
-import type { Tenant } from "../../lib/mockData";
-
-const TenantDetails = () => {
-  const router = useRouter();
-  const { tenantId } = useLocalSearchParams<{ tenantId: string }>();
-
-  const [tenant, setTenant] = useState<Tenant | null>(null);
-  const [loading, setLoading] = useState(true);
-
-  useEffect(() => {
-    const fetchTenant = async () => {
-      try {
-        const tenantData = await getTenantById(tenantId!);
-        setTenant(tenantData || null);
-      } catch (error) {
-        console.error("Failed to load tenant:", error);
-      } finally {
-        setLoading(false);
-      }
-    };
-    if (tenantId) fetchTenant();
-  }, [tenantId]);
-
-  const handleEditTenant = () => {
-    router.push(`/(tabs)/editTenant?tenantId=${tenantId}`);
-  };
-
-  const handleDeleteTenant = async () => {
-    Alert.alert(
-      "Confirm Deletion",
-      "Are you sure you want to delete this tenant?",
-      [
-        { text: "Cancel", style: "cancel" },
-        { text: "Delete", style: "destructive", onPress: async () => {
-            try {
-              await deleteTenantFromMock(tenantId!);
-              Alert.alert("Deleted", "Tenant deleted successfully!");
-              router.replace("/(tabs)/tenants");
-            } catch (error) {
-              console.error("Failed to delete tenant:", error);
-              Alert.alert("Error", "Failed to delete tenant.");
-            }
-          } 
-        }
-      ]
-    );
-  };
-
-  if (loading) {
-    return (
-      <View style={styles.loadingContainer}>
-        <ActivityIndicator size="large" color="#17b8a6" />
-      </View>
-    );
-  }
-
-  if (!tenant) {
-    return (
-      <View style={styles.container}>
-        <Text style={styles.errorText}>Tenant not found.</Text>
-      </View>
-    );
-  }
-
-  return (
-    <ScrollView contentContainerStyle={styles.container}>
-      <View style={styles.header}>
-        <TouchableOpacity onPress={() => router.back()}>
-          <Ionicons name="arrow-back" size={24} color="white" />
-        </TouchableOpacity>
-        <Text style={styles.headerText}>Tenant Details</Text>
-        <View style={{ width: 24 }} />
-      </View>
-
-      <View style={styles.content}>
-        {tenant.imageUrl && (
-          <Image source={{ uri: tenant.imageUrl }} style={styles.image} />
-        )}
-
-        <Text style={styles.detailText}>Name: {tenant.name}</Text>
-        <Text style={styles.detailText}>Email: {tenant.email}</Text>
-        <Text style={styles.detailText}>Phone: {tenant.phone}</Text>
-        <Text style={styles.detailText}>State: {tenant.state || '-'}</Text>
-        <Text style={styles.detailText}>City: {tenant.city || '-'}</Text>
-
-        <TouchableOpacity style={styles.button} onPress={handleEditTenant}>
-          <Text style={styles.buttonText}>Edit Tenant</Text>
-        </TouchableOpacity>
-
-        <TouchableOpacity style={[styles.button, { backgroundColor: 'red' }]} onPress={handleDeleteTenant}>
-          <Text style={styles.buttonText}>Delete Tenant</Text>
-        </TouchableOpacity>
-      </View>
-    </ScrollView>
-  );
-};
-
-export default TenantDetails;
-
-const styles = StyleSheet.create({
-  container: {
-    backgroundColor: "#F5F7FA",
-    flexGrow: 1,
-    padding: 20,
-  },
-  header: {
-    flexDirection: "row",
-    alignItems: "center",
-    backgroundColor: "#17b8a6",
-    paddingVertical: 10,
-    paddingHorizontal: 15,
-    borderRadius: 5,
-    marginBottom: 20,
-    justifyContent: "space-between",
-  },
-  headerText: {
-    color: "white",
-    fontSize: 18,
-    fontWeight: "bold",
-  },
-  content: {
-    alignItems: "center",
-  },
-  image: {
-    width: 120,
-    height: 120,
-    borderRadius: 60,
-    marginBottom: 20,
-    backgroundColor: "#ccc",
-  },
-  detailText: {
-    fontSize: 16,
-    marginBottom: 10,
-    color: "#333",
-  },
-  button: {
-    backgroundColor: "#17b8a6",
-    padding: 15,
-    borderRadius: 8,
-    marginTop: 15,
-    width: "100%",
-    alignItems: "center",
-  },
-  buttonText: {
-    color: "white",
-    fontWeight: "bold",
-  },
-  errorText: {
-    textAlign: "center",
-    marginTop: 20,
-    color: "red",
-    fontSize: 16,
-  },
-  loadingContainer: {
-    flex: 1,
-    justifyContent: "center",
-    alignItems: "center",
-  },
-});
diff --git a/app/(tabs)/tenants.tsx b/app/(tabs)/tenants.tsx
deleted file mode 100644
index 885a925..0000000
--- a/app/(tabs)/tenants.tsx
+++ /dev/null
@@ -1,183 +0,0 @@
-// app/(tabs)/tenants.tsx
-
-import React, { useEffect, useState } from "react";
-import { View, Text, StyleSheet, TouchableOpacity, Alert, FlatList, ActivityIndicator } from "react-native";
-import { useRouter, useFocusEffect } from "expo-router";
-import { Ionicons } from "@expo/vector-icons";
-import { getAllTenants, deleteTenantFromMock } from "../../lib/mockData";
-import type { Tenant } from "../../lib/mockData";
-import { useCallback } from "react";
-
-const Tenants = () => {
-  const router = useRouter();
-  const [tenants, setTenants] = useState<Tenant[]>([]);
-  const [loading, setLoading] = useState(true);
-  const [activeMenu, setActiveMenu] = useState<string | null>(null);
-
-  const loadTenants = async () => {
-    try {
-      setLoading(true);
-      const allTenants = await getAllTenants();
-      setTenants(allTenants);
-    } catch (error) {
-      console.error("Failed to load tenants:", error);
-      Alert.alert("Error", "Failed to load tenants.");
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  useFocusEffect(
-    useCallback(() => {
-      loadTenants();
-    }, [])
-  );
-
-  const toggleMenu = (tenantId: string) => {
-    setActiveMenu(activeMenu === tenantId ? null : tenantId);
-  };
-
-  const handleAddTenant = () => {
-    router.push("/(tabs)/addTenant");
-  };
-
-  const handleEditTenant = (tenantId: string) => {
-    setActiveMenu(null);
-    router.push(`/(tabs)/editTenant?tenantId=${tenantId}`);
-  };
-
-  const handleDeleteTenant = async (tenantId: string) => {
-    Alert.alert(
-      "Delete Tenant",
-      "Are you sure you want to delete this tenant?",
-      [
-        { text: "Cancel", style: "cancel" },
-        { text: "Delete", style: "destructive", onPress: async () => {
-          try {
-            await deleteTenantFromMock(tenantId);
-            await loadTenants();
-            Alert.alert("Success", "Tenant deleted successfully");
-          } catch (error) {
-            console.error("Failed to delete tenant:", error);
-            Alert.alert("Error", "Failed to delete tenant.");
-          }
-        }}
-      ]
-    );
-  };
-
-  const handleViewTenant = (tenantId: string) => {
-    router.push(`/(tabs)/tenant-details?tenantId=${tenantId}`);
-  };
-
-  const renderTenantItem = ({ item }: { item: Tenant }) => (
-    <View style={styles.tenantContainer}>
-      <TouchableOpacity style={styles.tenantCard} onPress={() => handleViewTenant(item.id)}>
-        <Ionicons name="person-circle-outline" size={40} color="#17b8a6" style={{ marginRight: 10 }} />
-        <View style={styles.tenantInfo}>
-          <Text style={styles.tenantName}>{item.name}</Text>
-          <Text style={styles.tenantSubInfo}>
-            {item.phone ? `📱 ${item.phone}` : "-"} | {item.email ? `📧 ${item.email}` : "-"}
-          </Text>
-        </View>
-        <TouchableOpacity onPress={() => toggleMenu(item.id)}>
-          <Ionicons name="ellipsis-vertical" size={20} color="gray" />
-        </TouchableOpacity>
-      </TouchableOpacity>
-
-      {activeMenu === item.id && (
-        <View style={styles.actionMenu}>
-          <TouchableOpacity style={styles.menuButton} onPress={() => handleEditTenant(item.id)}>
-            <Text style={styles.menuButtonText}>Edit</Text>
-          </TouchableOpacity>
-          <TouchableOpacity style={[styles.menuButton, { backgroundColor: "red" }]} onPress={() => handleDeleteTenant(item.id)}>
-            <Text style={styles.menuButtonText}>Delete</Text>
-          </TouchableOpacity>
-        </View>
-      )}
-    </View>
-  );
-
-  return (
-    <View style={styles.container}>
-      <View style={styles.header}>
-        <TouchableOpacity onPress={() => router.back()}>
-          <Ionicons name="arrow-back" size={24} color="white" />
-        </TouchableOpacity>
-        <Text style={styles.headerTitle}>Tenants</Text>
-        <TouchableOpacity onPress={handleAddTenant}>
-          <Ionicons name="add-circle-outline" size={28} color="white" />
-        </TouchableOpacity>
-      </View>
-
-      {loading ? (
-        <View style={styles.loadingContainer}>
-          <ActivityIndicator size="large" color="#17b8a6" />
-        </View>
-      ) : tenants.length === 0 ? (
-        <View style={styles.emptyContainer}>
-          <Text style={styles.emptyText}>No tenants found.</Text>
-          <TouchableOpacity style={styles.addButtonEmpty} onPress={handleAddTenant}>
-            <Text style={styles.addButtonText}>Add First Tenant</Text>
-          </TouchableOpacity>
-        </View>
-      ) : (
-        <FlatList
-          data={tenants}
-          keyExtractor={(item) => item.id}
-          renderItem={renderTenantItem}
-          contentContainerStyle={styles.list}
-        />
-      )}
-    </View>
-  );
-};
-
-export default Tenants;
-
-const styles = StyleSheet.create({
-  container: { flex: 1, backgroundColor: "#F5F7FA" },
-  header: {
-    flexDirection: "row",
-    justifyContent: "space-between",
-    backgroundColor: "#17b8a6",
-    padding: 15,
-    alignItems: "center",
-  },
-  headerTitle: { fontSize: 18, fontWeight: "bold", color: "white" },
-  loadingContainer: { flex: 1, justifyContent: "center", alignItems: "center" },
-  emptyContainer: { flex: 1, justifyContent: "center", alignItems: "center" },
-  emptyText: { fontSize: 16, color: "#666", marginBottom: 10 },
-  addButtonEmpty: {
-    backgroundColor: "#17b8a6",
-    paddingHorizontal: 20,
-    paddingVertical: 10,
-    borderRadius: 8,
-  },
-  addButtonText: { color: "white", fontWeight: "bold" },
-  list: { padding: 20 },
-  tenantContainer: { marginBottom: 15 },
-  tenantCard: {
-    flexDirection: "row",
-    alignItems: "center",
-    backgroundColor: "white",
-    padding: 15,
-    borderRadius: 8,
-    elevation: 3,
-  },
-  tenantInfo: { flex: 1 },
-  tenantName: { fontSize: 16, fontWeight: "bold", marginBottom: 5 },
-  tenantSubInfo: { fontSize: 14, color: "gray" },
-  actionMenu: {
-    marginTop: 5,
-    backgroundColor: "#FFF",
-    borderRadius: 8,
-    overflow: "hidden",
-    elevation: 2,
-  },
-  menuButton: {
-    paddingVertical: 10,
-    paddingHorizontal: 15,
-  },
-  menuButtonText: { color: "black", fontWeight: "600" },
-});
diff --git a/app/(tabs)/unit-details.tsx b/app/(tabs)/unit-details.tsx
deleted file mode 100644
index 9b304fe..0000000
--- a/app/(tabs)/unit-details.tsx
+++ /dev/null
@@ -1,185 +0,0 @@
-// app/(tabs)/unit-details.tsx
-import React, { useEffect, useState } from 'react';
-import { View, Text, StyleSheet, TouchableOpacity, Alert, ActivityIndicator } from 'react-native';
-import { useLocalSearchParams, useRouter } from 'expo-router';
-import { Ionicons } from '@expo/vector-icons';
-import { getUnitById, getTenantById, removeTenantFromUnit } from '../../lib/mockData';
-import type { Unit, Tenant } from '../../lib/mockData';
-
-const UnitDetails = () => {
-  const router = useRouter();
-  const params = useLocalSearchParams();
-  const propertyId = params.propertyId as string;
-  const unitId = params.unitId as string;
-
-  const [unit, setUnit] = useState<Unit | null>(null);
-  const [tenant, setTenant] = useState<Tenant | null>(null);
-  const [loading, setLoading] = useState(true);
-
-  useEffect(() => {
-    const loadUnitAndTenant = async () => {
-      try {
-        const unitData = await getUnitById(propertyId, unitId);
-        setUnit(unitData || null);
-
-        if (unitData?.tenantId) {
-          const tenantData = await getTenantById(unitData.tenantId);
-          setTenant(tenantData || null);
-        }
-      } catch (error) {
-        console.error('Error loading unit or tenant:', error);
-      } finally {
-        setLoading(false);
-      }
-    };
-
-    loadUnitAndTenant();
-  }, [propertyId, unitId]);
-
-  const handleAddTenant = () => {
-    router.push({ pathname: '/(tabs)/addTenant', params: { propertyId, unitId } });
-
-  };
-
-  const handleEditTenant = () => {
-    if (tenant) {
-      router.push({ pathname: '/(tabs)/editTenant', params: { tenantId: tenant.id } });
-    }
-  };
-
-  const handleRemoveTenant = async () => {
-    try {
-      await removeTenantFromUnit(propertyId, unitId);
-      Alert.alert("Success", "Tenant removed successfully!");
-      setTenant(null);
-      setUnit(prev => prev ? { ...prev, status: 'vacant', tenantId: undefined, startDate: undefined } : prev);
-    } catch (error) {
-      console.error('Failed to remove tenant:', error);
-      Alert.alert("Error", "Failed to remove tenant.");
-    }
-  };
-
-  if (loading) {
-    return (
-      <View style={styles.loadingContainer}>
-        <ActivityIndicator size="large" color="#17b8a6" />
-      </View>
-    );
-  }
-
-  if (!unit) {
-    return (
-      <View style={styles.container}>
-        <Text>Unit not found</Text>
-      </View>
-    );
-  }
-
-  return (
-    <View style={styles.container}>
-      <View style={styles.header}>
-        <TouchableOpacity onPress={() => router.back()}>
-          <Ionicons name="arrow-back" size={24} color="white" />
-        </TouchableOpacity>
-        <Text style={styles.headerText}>Unit Details</Text>
-      </View>
-
-      <View style={styles.content}>
-        <Text style={styles.title}>Unit #{unit.id}</Text>
-
-        <View style={styles.detailRow}>
-          <Text style={styles.label}>Size:</Text>
-          <Text style={styles.value}>{unit.size} m²</Text>
-        </View>
-
-        <View style={styles.detailRow}>
-          <Text style={styles.label}>Bedrooms:</Text>
-          <Text style={styles.value}>{unit.bedrooms}</Text>
-        </View>
-
-        <View style={styles.detailRow}>
-          <Text style={styles.label}>Bathrooms:</Text>
-          <Text style={styles.value}>{unit.bathrooms}</Text>
-        </View>
-
-        <View style={styles.detailRow}>
-          <Text style={styles.label}>Rent:</Text>
-          <Text style={styles.value}>{unit.rentAmount} SAR</Text>
-        </View>
-
-        <View style={styles.detailRow}>
-          <Text style={styles.label}>Status:</Text>
-          <Text style={[styles.value, unit.status === 'occupied' ? styles.occupied : styles.vacant]}>
-            {unit.status}
-          </Text>
-        </View>
-
-        {tenant ? (
-          <>
-            <View style={styles.tenantSection}>
-              <Text style={styles.sectionTitle}>Tenant Info</Text>
-              <Text>Name: {tenant.name}</Text>
-              <Text>Phone: {tenant.phone}</Text>
-              <Text>Email: {tenant.email}</Text>
-            </View>
-
-            <TouchableOpacity style={styles.button} onPress={handleEditTenant}>
-              <Text style={styles.buttonText}>Edit Tenant</Text>
-            </TouchableOpacity>
-
-            <TouchableOpacity style={[styles.button, { backgroundColor: 'red' }]} onPress={handleRemoveTenant}>
-              <Text style={styles.buttonText}>Remove Tenant</Text>
-            </TouchableOpacity>
-          </>
-        ) : (
-          <TouchableOpacity style={styles.button} onPress={handleAddTenant}>
-            <Text style={styles.buttonText}>Add Tenant</Text>
-          </TouchableOpacity>
-        )}
-      </View>
-    </View>
-  );
-};
-
-const styles = StyleSheet.create({
-  container: { flex: 1, backgroundColor: '#F5F7FA' },
-  header: {
-    flexDirection: 'row',
-    alignItems: 'center',
-    backgroundColor: '#17b8a6',
-    padding: 15,
-  },
-  headerText: { color: 'white', fontSize: 18, fontWeight: 'bold', marginLeft: 10 },
-  content: { padding: 20 },
-  title: { fontSize: 20, fontWeight: 'bold', marginBottom: 20, color: '#333' },
-  detailRow: {
-    flexDirection: 'row',
-    justifyContent: 'space-between',
-    paddingVertical: 10,
-    borderBottomWidth: 1,
-    borderBottomColor: '#eee',
-  },
-  label: { fontSize: 16, color: '#666' },
-  value: { fontSize: 16, fontWeight: '500' },
-  occupied: { color: 'green' },
-  vacant: { color: 'orange' },
-  button: {
-    backgroundColor: '#17b8a6',
-    padding: 15,
-    borderRadius: 8,
-    marginTop: 20,
-    alignItems: 'center',
-  },
-  buttonText: { color: 'white', fontWeight: 'bold' },
-  tenantSection: {
-    backgroundColor: '#fff',
-    padding: 15,
-    marginTop: 20,
-    borderRadius: 8,
-    elevation: 2,
-  },
-  sectionTitle: { fontWeight: 'bold', marginBottom: 10, fontSize: 16 },
-  loadingContainer: { flex: 1, justifyContent: 'center', alignItems: 'center' },
-});
-
-export default UnitDetails;
\ No newline at end of file
diff --git a/app/(tabs)/units.tsx b/app/(tabs)/units.tsx
deleted file mode 100644
index e403bc6..0000000
--- a/app/(tabs)/units.tsx
+++ /dev/null
@@ -1,155 +0,0 @@
-import React, { useEffect, useState } from "react";
-import { View, Text, StyleSheet, TouchableOpacity, FlatList } from "react-native";
-import { Ionicons } from "@expo/vector-icons";
-import { useLocalSearchParams, useRouter } from "expo-router";
-import { Image } from "expo-image";
-import mockProperties from "../../lib/mockData"; // بيانات العقارات والوحدات
-
-const Units = () => {
-  const router = useRouter();
-  const { propertyId } = useLocalSearchParams();
-  const [units, setUnits] = useState([]);
-
-  useEffect(() => {
-    if (propertyId) {
-      const selected = mockProperties.find((p) => p.id === propertyId);
-      setUnits(selected?.units || []);
-    }
-  }, [propertyId]);
-
-  const goToAddUnit = () => {
-    router.push({ pathname: "/(tabs)/addUnit", params: { propertyId } });
-  };
-
-  const renderUnit = ({ item }) => (
-    <View style={styles.unitCard}>
-      <Image
-        source={item.imageUrl ? { uri: item.imageUrl } : require("../../assets/images/build.png")}
-        style={styles.unitImage}
-        contentFit="cover"
-      />
-      <View style={styles.unitInfo}>
-        <Text style={styles.unitTitle}>Unit #{item.unitNumber}</Text>
-        <Text style={styles.unitDetails}>Size: {item.size} m² • Rent: {item.rent} SAR</Text>
-        <Text style={styles.unitDetails}>Rooms: {item.bedrooms} • Baths: {item.bathrooms}</Text>
-        <Text style={styles.unitStatus}>{item.tenant ? "🟢 Occupied" : "🔘 Vacant"}</Text>
-      </View>
-    </View>
-  );
-
-  return (
-    <View style={styles.container}>
-      <View style={styles.header}>
-        <TouchableOpacity onPress={() => router.back()} style={styles.backButton}>
-          <Ionicons name="arrow-back" size={24} color="white" />
-        </TouchableOpacity>
-        <Text style={styles.headerText}>Units</Text>
-        <TouchableOpacity onPress={goToAddUnit} style={styles.addButton}>
-          <Ionicons name="add" size={24} color="white" />
-        </TouchableOpacity>
-      </View>
-
-      {units.length === 0 ? (
-        <View style={styles.emptyContainer}>
-          <Text style={styles.emptyText}>No units found for this property.</Text>
-          <TouchableOpacity onPress={goToAddUnit} style={styles.emptyAddButton}>
-            <Text style={styles.emptyAddButtonText}>Add your first unit</Text>
-          </TouchableOpacity>
-        </View>
-      ) : (
-        <FlatList
-          data={units}
-          renderItem={renderUnit}
-          keyExtractor={(item) => item.unitNumber?.toString() || Math.random().toString()}
-          contentContainerStyle={styles.list}
-        />
-      )}
-    </View>
-  );
-};
-
-export default Units;
-
-const styles = StyleSheet.create({
-  container: {
-    flex: 1,
-    backgroundColor: "#F5F7FA",
-  },
-  header: {
-    backgroundColor: "#17b8a6",
-    padding: 15,
-    flexDirection: "row",
-    alignItems: "center",
-  },
-  backButton: {
-    marginRight: 15,
-  },
-  headerText: {
-    flex: 1,
-    color: "#fff",
-    fontSize: 20,
-    fontWeight: "bold",
-  },
-  addButton: {
-    padding: 5,
-  },
-  list: {
-    padding: 20,
-  },
-  unitCard: {
-    flexDirection: "row",
-    alignItems: "center",
-    backgroundColor: "#fff",
-    borderRadius: 10,
-    padding: 15,
-    marginBottom: 10,
-    shadowColor: "#000",
-    shadowOffset: { width: 0, height: 1 },
-    shadowOpacity: 0.1,
-    shadowRadius: 2,
-    elevation: 2,
-  },
-  unitImage: {
-    width: 40,
-    height: 40,
-    borderRadius: 5,
-    marginRight: 10,
-    backgroundColor: "#eee",
-  },
-  unitInfo: {
-    flex: 1,
-  },
-  unitTitle: {
-    fontSize: 16,
-    fontWeight: "600",
-  },
-  unitDetails: {
-    fontSize: 14,
-    color: "gray",
-  },
-  unitStatus: {
-    fontSize: 14,
-    color: "#17b8a6",
-    fontWeight: "bold",
-  },
-  emptyContainer: {
-    alignItems: "center",
-    justifyContent: "center",
-    padding: 30,
-  },
-  emptyText: {
-    fontSize: 16,
-    color: "#666",
-    marginBottom: 15,
-  },
-  emptyAddButton: {
-    backgroundColor: "#17b8a6",
-    paddingVertical: 10,
-    paddingHorizontal: 20,
-    borderRadius: 8,
-  },
-  emptyAddButtonText: {
-    color: "white",
-    fontWeight: "600",
-  },
-});
diff --git a/lib/mockData.ts b/lib/mockData.ts
index 13df4a4..bd21fe1 100644
--- a/lib/mockData.ts
+++ b/lib/mockData.ts
@@ -22,18 +22,22 @@ export interface Property {
 export interface Unit {
   id: string;
   propertyId: string;
+  unitNumber: string;         
   size: number;
   bedrooms: number;
   bathrooms: number;
   rentAmount: number;
+  imageUrl?: string;          
   status: 'vacant' | 'occupied';
   tenantId?: string;
+  tenant?: Tenant;            
   startDate?: string;
   payments?: { amount: number; date: string }[];
   floorNumber?: number;
   notes?: string;
 }
 
+
 export interface Tenant {
   id: string;
   name: string;
